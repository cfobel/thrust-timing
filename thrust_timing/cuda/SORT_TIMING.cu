/* Generated by Cython 0.21.1 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_21_1"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
  #define __Pyx_PyFrozenSet_Size(s)         PyObject_Size(s)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
  #define __Pyx_PyFrozenSet_Size(s)         PySet_Size(s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__thrust_timing__cuda__SORT_TIMING
#define __PYX_HAVE_API__thrust_timing__cuda__SORT_TIMING
#include "stdint.h"
#include <thrust/device_vector.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <thrust/partition.h>
#include "src/partition.h"
#include <thrust/pair.h>
#include <thrust/extrema.h>
#include <thrust/sort.h>
#include <thrust/scatter.h>
#include <thrust/fill.h>
#include <thrust/transform.h>
#include <thrust/iterator/constant_iterator.h>
#include <thrust/iterator/transform_iterator.h>
#include <thrust/iterator/iterator_traits.h>
#include <thrust/reduce.h>
#include <thrust/functional.h>
#include "src/functional.hpp"
#include "src/unpack_args.hpp"
#include <thrust/tuple.h>
#include <thrust/iterator/permutation_iterator.h>
#include <thrust/iterator/zip_iterator.h>
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include <thrust/copy.h>
#include <thrust/replace.h>
#include "delay.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "thrust_timing/cuda/SORT_TIMING.pyx",
  "__init__.pxd",
  "type.pxd",
  "device_vector.pxd",
  "device_vector.pxd",
  "device_vector.pxd",
  "device_vector.pxd",
  "device_vector.pxd",
  "device_vector.pxd",
  "device_vector.pxd",
  "device_vector.pxd",
  "device_vector.pxd",
  "device_vector.pxd",
};

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":723
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":724
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":725
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":726
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":730
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":731
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":737
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":738
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":747
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":748
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":749
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":752
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":756
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":759
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

/* "cythrust/cuda/device_vector/int8/device_vector.pxd":13
 * 
 * 
 * ctypedef int8_t Value             # <<<<<<<<<<<<<<
 * ctypedef device_vector[Value] Vector
 * ctypedef device_vector[Value].iterator Iterator
 */
typedef int8_t __pyx_t_8cythrust_4cuda_13device_vector_4int8_13device_vector_Value;
typedef uint8_t __pyx_t_8cythrust_4cuda_13device_vector_5uint8_13device_vector_Value;
typedef int16_t __pyx_t_8cythrust_4cuda_13device_vector_5int16_13device_vector_Value;
typedef uint16_t __pyx_t_8cythrust_4cuda_13device_vector_6uint16_13device_vector_Value;
typedef int32_t __pyx_t_8cythrust_4cuda_13device_vector_5int32_13device_vector_Value;
typedef uint32_t __pyx_t_8cythrust_4cuda_13device_vector_6uint32_13device_vector_Value;
typedef int64_t __pyx_t_8cythrust_4cuda_13device_vector_5int64_13device_vector_Value;
typedef uint64_t __pyx_t_8cythrust_4cuda_13device_vector_6uint64_13device_vector_Value;
typedef float __pyx_t_8cythrust_4cuda_13device_vector_7float32_13device_vector_Value;
typedef double __pyx_t_8cythrust_4cuda_13device_vector_7float64_13device_vector_Value;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_8cythrust_4cuda_13device_vector_4int8_13device_vector_DeviceVector;
struct __pyx_obj_8cythrust_4cuda_13device_vector_4int8_13device_vector_DeviceVectorView;
struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVector;
struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView;
struct __pyx_obj_8cythrust_4cuda_13device_vector_5int16_13device_vector_DeviceVector;
struct __pyx_obj_8cythrust_4cuda_13device_vector_5int16_13device_vector_DeviceVectorView;
struct __pyx_obj_8cythrust_4cuda_13device_vector_6uint16_13device_vector_DeviceVector;
struct __pyx_obj_8cythrust_4cuda_13device_vector_6uint16_13device_vector_DeviceVectorView;
struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVector;
struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView;
struct __pyx_obj_8cythrust_4cuda_13device_vector_6uint32_13device_vector_DeviceVector;
struct __pyx_obj_8cythrust_4cuda_13device_vector_6uint32_13device_vector_DeviceVectorView;
struct __pyx_obj_8cythrust_4cuda_13device_vector_5int64_13device_vector_DeviceVector;
struct __pyx_obj_8cythrust_4cuda_13device_vector_5int64_13device_vector_DeviceVectorView;
struct __pyx_obj_8cythrust_4cuda_13device_vector_6uint64_13device_vector_DeviceVector;
struct __pyx_obj_8cythrust_4cuda_13device_vector_6uint64_13device_vector_DeviceVectorView;
struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVector;
struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView;
struct __pyx_obj_8cythrust_4cuda_13device_vector_7float64_13device_vector_DeviceVector;
struct __pyx_obj_8cythrust_4cuda_13device_vector_7float64_13device_vector_DeviceVectorView;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":763
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "cythrust/cuda/device_vector/int8/device_vector.pxd":14
 * 
 * ctypedef int8_t Value
 * ctypedef device_vector[Value] Vector             # <<<<<<<<<<<<<<
 * ctypedef device_vector[Value].iterator Iterator
 * 
 */
typedef thrust::device_vector<__pyx_t_8cythrust_4cuda_13device_vector_4int8_13device_vector_Value>  __pyx_t_8cythrust_4cuda_13device_vector_4int8_13device_vector_Vector;

/* "cythrust/cuda/device_vector/int8/device_vector.pxd":15
 * ctypedef int8_t Value
 * ctypedef device_vector[Value] Vector
 * ctypedef device_vector[Value].iterator Iterator             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef thrust::device_vector<__pyx_t_8cythrust_4cuda_13device_vector_4int8_13device_vector_Value> ::iterator __pyx_t_8cythrust_4cuda_13device_vector_4int8_13device_vector_Iterator;

/* "cythrust/cuda/device_vector/uint8/device_vector.pxd":14
 * 
 * ctypedef uint8_t Value
 * ctypedef device_vector[Value] Vector             # <<<<<<<<<<<<<<
 * ctypedef device_vector[Value].iterator Iterator
 * 
 */
typedef thrust::device_vector<__pyx_t_8cythrust_4cuda_13device_vector_5uint8_13device_vector_Value>  __pyx_t_8cythrust_4cuda_13device_vector_5uint8_13device_vector_Vector;

/* "cythrust/cuda/device_vector/uint8/device_vector.pxd":15
 * ctypedef uint8_t Value
 * ctypedef device_vector[Value] Vector
 * ctypedef device_vector[Value].iterator Iterator             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef thrust::device_vector<__pyx_t_8cythrust_4cuda_13device_vector_5uint8_13device_vector_Value> ::iterator __pyx_t_8cythrust_4cuda_13device_vector_5uint8_13device_vector_Iterator;

/* "cythrust/cuda/device_vector/int16/device_vector.pxd":14
 * 
 * ctypedef int16_t Value
 * ctypedef device_vector[Value] Vector             # <<<<<<<<<<<<<<
 * ctypedef device_vector[Value].iterator Iterator
 * 
 */
typedef thrust::device_vector<__pyx_t_8cythrust_4cuda_13device_vector_5int16_13device_vector_Value>  __pyx_t_8cythrust_4cuda_13device_vector_5int16_13device_vector_Vector;

/* "cythrust/cuda/device_vector/int16/device_vector.pxd":15
 * ctypedef int16_t Value
 * ctypedef device_vector[Value] Vector
 * ctypedef device_vector[Value].iterator Iterator             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef thrust::device_vector<__pyx_t_8cythrust_4cuda_13device_vector_5int16_13device_vector_Value> ::iterator __pyx_t_8cythrust_4cuda_13device_vector_5int16_13device_vector_Iterator;

/* "cythrust/cuda/device_vector/uint16/device_vector.pxd":14
 * 
 * ctypedef uint16_t Value
 * ctypedef device_vector[Value] Vector             # <<<<<<<<<<<<<<
 * ctypedef device_vector[Value].iterator Iterator
 * 
 */
typedef thrust::device_vector<__pyx_t_8cythrust_4cuda_13device_vector_6uint16_13device_vector_Value>  __pyx_t_8cythrust_4cuda_13device_vector_6uint16_13device_vector_Vector;

/* "cythrust/cuda/device_vector/uint16/device_vector.pxd":15
 * ctypedef uint16_t Value
 * ctypedef device_vector[Value] Vector
 * ctypedef device_vector[Value].iterator Iterator             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef thrust::device_vector<__pyx_t_8cythrust_4cuda_13device_vector_6uint16_13device_vector_Value> ::iterator __pyx_t_8cythrust_4cuda_13device_vector_6uint16_13device_vector_Iterator;

/* "cythrust/cuda/device_vector/int32/device_vector.pxd":14
 * 
 * ctypedef int32_t Value
 * ctypedef device_vector[Value] Vector             # <<<<<<<<<<<<<<
 * ctypedef device_vector[Value].iterator Iterator
 * 
 */
typedef thrust::device_vector<__pyx_t_8cythrust_4cuda_13device_vector_5int32_13device_vector_Value>  __pyx_t_8cythrust_4cuda_13device_vector_5int32_13device_vector_Vector;

/* "cythrust/cuda/device_vector/int32/device_vector.pxd":15
 * ctypedef int32_t Value
 * ctypedef device_vector[Value] Vector
 * ctypedef device_vector[Value].iterator Iterator             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef thrust::device_vector<__pyx_t_8cythrust_4cuda_13device_vector_5int32_13device_vector_Value> ::iterator __pyx_t_8cythrust_4cuda_13device_vector_5int32_13device_vector_Iterator;

/* "cythrust/cuda/device_vector/uint32/device_vector.pxd":14
 * 
 * ctypedef uint32_t Value
 * ctypedef device_vector[Value] Vector             # <<<<<<<<<<<<<<
 * ctypedef device_vector[Value].iterator Iterator
 * 
 */
typedef thrust::device_vector<__pyx_t_8cythrust_4cuda_13device_vector_6uint32_13device_vector_Value>  __pyx_t_8cythrust_4cuda_13device_vector_6uint32_13device_vector_Vector;

/* "cythrust/cuda/device_vector/uint32/device_vector.pxd":15
 * ctypedef uint32_t Value
 * ctypedef device_vector[Value] Vector
 * ctypedef device_vector[Value].iterator Iterator             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef thrust::device_vector<__pyx_t_8cythrust_4cuda_13device_vector_6uint32_13device_vector_Value> ::iterator __pyx_t_8cythrust_4cuda_13device_vector_6uint32_13device_vector_Iterator;

/* "cythrust/cuda/device_vector/int64/device_vector.pxd":14
 * 
 * ctypedef int64_t Value
 * ctypedef device_vector[Value] Vector             # <<<<<<<<<<<<<<
 * ctypedef device_vector[Value].iterator Iterator
 * 
 */
typedef thrust::device_vector<__pyx_t_8cythrust_4cuda_13device_vector_5int64_13device_vector_Value>  __pyx_t_8cythrust_4cuda_13device_vector_5int64_13device_vector_Vector;

/* "cythrust/cuda/device_vector/int64/device_vector.pxd":15
 * ctypedef int64_t Value
 * ctypedef device_vector[Value] Vector
 * ctypedef device_vector[Value].iterator Iterator             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef thrust::device_vector<__pyx_t_8cythrust_4cuda_13device_vector_5int64_13device_vector_Value> ::iterator __pyx_t_8cythrust_4cuda_13device_vector_5int64_13device_vector_Iterator;

/* "cythrust/cuda/device_vector/uint64/device_vector.pxd":14
 * 
 * ctypedef uint64_t Value
 * ctypedef device_vector[Value] Vector             # <<<<<<<<<<<<<<
 * ctypedef device_vector[Value].iterator Iterator
 * 
 */
typedef thrust::device_vector<__pyx_t_8cythrust_4cuda_13device_vector_6uint64_13device_vector_Value>  __pyx_t_8cythrust_4cuda_13device_vector_6uint64_13device_vector_Vector;

/* "cythrust/cuda/device_vector/uint64/device_vector.pxd":15
 * ctypedef uint64_t Value
 * ctypedef device_vector[Value] Vector
 * ctypedef device_vector[Value].iterator Iterator             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef thrust::device_vector<__pyx_t_8cythrust_4cuda_13device_vector_6uint64_13device_vector_Value> ::iterator __pyx_t_8cythrust_4cuda_13device_vector_6uint64_13device_vector_Iterator;

/* "cythrust/cuda/device_vector/float32/device_vector.pxd":14
 * 
 * ctypedef float Value
 * ctypedef device_vector[Value] Vector             # <<<<<<<<<<<<<<
 * ctypedef device_vector[Value].iterator Iterator
 * 
 */
typedef thrust::device_vector<__pyx_t_8cythrust_4cuda_13device_vector_7float32_13device_vector_Value>  __pyx_t_8cythrust_4cuda_13device_vector_7float32_13device_vector_Vector;

/* "cythrust/cuda/device_vector/float32/device_vector.pxd":15
 * ctypedef float Value
 * ctypedef device_vector[Value] Vector
 * ctypedef device_vector[Value].iterator Iterator             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef thrust::device_vector<__pyx_t_8cythrust_4cuda_13device_vector_7float32_13device_vector_Value> ::iterator __pyx_t_8cythrust_4cuda_13device_vector_7float32_13device_vector_Iterator;

/* "cythrust/cuda/device_vector/float64/device_vector.pxd":14
 * 
 * ctypedef double Value
 * ctypedef device_vector[Value] Vector             # <<<<<<<<<<<<<<
 * ctypedef device_vector[Value].iterator Iterator
 * 
 */
typedef thrust::device_vector<__pyx_t_8cythrust_4cuda_13device_vector_7float64_13device_vector_Value>  __pyx_t_8cythrust_4cuda_13device_vector_7float64_13device_vector_Vector;

/* "cythrust/cuda/device_vector/float64/device_vector.pxd":15
 * ctypedef double Value
 * ctypedef device_vector[Value] Vector
 * ctypedef device_vector[Value].iterator Iterator             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef thrust::device_vector<__pyx_t_8cythrust_4cuda_13device_vector_7float64_13device_vector_Value> ::iterator __pyx_t_8cythrust_4cuda_13device_vector_7float64_13device_vector_Iterator;

/* "cythrust/cuda/device_vector/int8/device_vector.pxd":18
 * 
 * 
 * cdef class DeviceVector:             # <<<<<<<<<<<<<<
 *     cdef device_vector[int8_t] *_vector
 *     cdef object dtype
 */
struct __pyx_obj_8cythrust_4cuda_13device_vector_4int8_13device_vector_DeviceVector {
  PyObject_HEAD
  thrust::device_vector<int8_t>  *_vector;
  PyObject *dtype;
  PyObject *ctype;
};


/* "cythrust/cuda/device_vector/int8/device_vector.pxd":24
 * 
 * 
 * cdef class DeviceVectorView:             # <<<<<<<<<<<<<<
 *     cdef device_vector[int8_t] *_vector
 *     cdef device_vector[int8_t].iterator _begin
 */
struct __pyx_obj_8cythrust_4cuda_13device_vector_4int8_13device_vector_DeviceVectorView {
  PyObject_HEAD
  thrust::device_vector<int8_t>  *_vector;
  thrust::device_vector<int8_t> ::iterator _begin;
  thrust::device_vector<int8_t> ::iterator _end;
  PyObject *dtype;
  PyObject *ctype;
};


/* "cythrust/cuda/device_vector/uint8/device_vector.pxd":18
 * 
 * 
 * cdef class DeviceVector:             # <<<<<<<<<<<<<<
 *     cdef device_vector[uint8_t] *_vector
 *     cdef object dtype
 */
struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVector {
  PyObject_HEAD
  thrust::device_vector<uint8_t>  *_vector;
  PyObject *dtype;
  PyObject *ctype;
};


/* "cythrust/cuda/device_vector/uint8/device_vector.pxd":24
 * 
 * 
 * cdef class DeviceVectorView:             # <<<<<<<<<<<<<<
 *     cdef device_vector[uint8_t] *_vector
 *     cdef device_vector[uint8_t].iterator _begin
 */
struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView {
  PyObject_HEAD
  thrust::device_vector<uint8_t>  *_vector;
  thrust::device_vector<uint8_t> ::iterator _begin;
  thrust::device_vector<uint8_t> ::iterator _end;
  PyObject *dtype;
  PyObject *ctype;
};


/* "cythrust/cuda/device_vector/int16/device_vector.pxd":18
 * 
 * 
 * cdef class DeviceVector:             # <<<<<<<<<<<<<<
 *     cdef device_vector[int16_t] *_vector
 *     cdef object dtype
 */
struct __pyx_obj_8cythrust_4cuda_13device_vector_5int16_13device_vector_DeviceVector {
  PyObject_HEAD
  thrust::device_vector<int16_t>  *_vector;
  PyObject *dtype;
  PyObject *ctype;
};


/* "cythrust/cuda/device_vector/int16/device_vector.pxd":24
 * 
 * 
 * cdef class DeviceVectorView:             # <<<<<<<<<<<<<<
 *     cdef device_vector[int16_t] *_vector
 *     cdef device_vector[int16_t].iterator _begin
 */
struct __pyx_obj_8cythrust_4cuda_13device_vector_5int16_13device_vector_DeviceVectorView {
  PyObject_HEAD
  thrust::device_vector<int16_t>  *_vector;
  thrust::device_vector<int16_t> ::iterator _begin;
  thrust::device_vector<int16_t> ::iterator _end;
  PyObject *dtype;
  PyObject *ctype;
};


/* "cythrust/cuda/device_vector/uint16/device_vector.pxd":18
 * 
 * 
 * cdef class DeviceVector:             # <<<<<<<<<<<<<<
 *     cdef device_vector[uint16_t] *_vector
 *     cdef object dtype
 */
struct __pyx_obj_8cythrust_4cuda_13device_vector_6uint16_13device_vector_DeviceVector {
  PyObject_HEAD
  thrust::device_vector<uint16_t>  *_vector;
  PyObject *dtype;
  PyObject *ctype;
};


/* "cythrust/cuda/device_vector/uint16/device_vector.pxd":24
 * 
 * 
 * cdef class DeviceVectorView:             # <<<<<<<<<<<<<<
 *     cdef device_vector[uint16_t] *_vector
 *     cdef device_vector[uint16_t].iterator _begin
 */
struct __pyx_obj_8cythrust_4cuda_13device_vector_6uint16_13device_vector_DeviceVectorView {
  PyObject_HEAD
  thrust::device_vector<uint16_t>  *_vector;
  thrust::device_vector<uint16_t> ::iterator _begin;
  thrust::device_vector<uint16_t> ::iterator _end;
  PyObject *dtype;
  PyObject *ctype;
};


/* "cythrust/cuda/device_vector/int32/device_vector.pxd":18
 * 
 * 
 * cdef class DeviceVector:             # <<<<<<<<<<<<<<
 *     cdef device_vector[int32_t] *_vector
 *     cdef object dtype
 */
struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVector {
  PyObject_HEAD
  thrust::device_vector<int32_t>  *_vector;
  PyObject *dtype;
  PyObject *ctype;
};


/* "cythrust/cuda/device_vector/int32/device_vector.pxd":24
 * 
 * 
 * cdef class DeviceVectorView:             # <<<<<<<<<<<<<<
 *     cdef device_vector[int32_t] *_vector
 *     cdef device_vector[int32_t].iterator _begin
 */
struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView {
  PyObject_HEAD
  thrust::device_vector<int32_t>  *_vector;
  thrust::device_vector<int32_t> ::iterator _begin;
  thrust::device_vector<int32_t> ::iterator _end;
  PyObject *dtype;
  PyObject *ctype;
};


/* "cythrust/cuda/device_vector/uint32/device_vector.pxd":18
 * 
 * 
 * cdef class DeviceVector:             # <<<<<<<<<<<<<<
 *     cdef device_vector[uint32_t] *_vector
 *     cdef object dtype
 */
struct __pyx_obj_8cythrust_4cuda_13device_vector_6uint32_13device_vector_DeviceVector {
  PyObject_HEAD
  thrust::device_vector<uint32_t>  *_vector;
  PyObject *dtype;
  PyObject *ctype;
};


/* "cythrust/cuda/device_vector/uint32/device_vector.pxd":24
 * 
 * 
 * cdef class DeviceVectorView:             # <<<<<<<<<<<<<<
 *     cdef device_vector[uint32_t] *_vector
 *     cdef device_vector[uint32_t].iterator _begin
 */
struct __pyx_obj_8cythrust_4cuda_13device_vector_6uint32_13device_vector_DeviceVectorView {
  PyObject_HEAD
  thrust::device_vector<uint32_t>  *_vector;
  thrust::device_vector<uint32_t> ::iterator _begin;
  thrust::device_vector<uint32_t> ::iterator _end;
  PyObject *dtype;
  PyObject *ctype;
};


/* "cythrust/cuda/device_vector/int64/device_vector.pxd":18
 * 
 * 
 * cdef class DeviceVector:             # <<<<<<<<<<<<<<
 *     cdef device_vector[int64_t] *_vector
 *     cdef object dtype
 */
struct __pyx_obj_8cythrust_4cuda_13device_vector_5int64_13device_vector_DeviceVector {
  PyObject_HEAD
  thrust::device_vector<int64_t>  *_vector;
  PyObject *dtype;
  PyObject *ctype;
};


/* "cythrust/cuda/device_vector/int64/device_vector.pxd":24
 * 
 * 
 * cdef class DeviceVectorView:             # <<<<<<<<<<<<<<
 *     cdef device_vector[int64_t] *_vector
 *     cdef device_vector[int64_t].iterator _begin
 */
struct __pyx_obj_8cythrust_4cuda_13device_vector_5int64_13device_vector_DeviceVectorView {
  PyObject_HEAD
  thrust::device_vector<int64_t>  *_vector;
  thrust::device_vector<int64_t> ::iterator _begin;
  thrust::device_vector<int64_t> ::iterator _end;
  PyObject *dtype;
  PyObject *ctype;
};


/* "cythrust/cuda/device_vector/uint64/device_vector.pxd":18
 * 
 * 
 * cdef class DeviceVector:             # <<<<<<<<<<<<<<
 *     cdef device_vector[uint64_t] *_vector
 *     cdef object dtype
 */
struct __pyx_obj_8cythrust_4cuda_13device_vector_6uint64_13device_vector_DeviceVector {
  PyObject_HEAD
  thrust::device_vector<uint64_t>  *_vector;
  PyObject *dtype;
  PyObject *ctype;
};


/* "cythrust/cuda/device_vector/uint64/device_vector.pxd":24
 * 
 * 
 * cdef class DeviceVectorView:             # <<<<<<<<<<<<<<
 *     cdef device_vector[uint64_t] *_vector
 *     cdef device_vector[uint64_t].iterator _begin
 */
struct __pyx_obj_8cythrust_4cuda_13device_vector_6uint64_13device_vector_DeviceVectorView {
  PyObject_HEAD
  thrust::device_vector<uint64_t>  *_vector;
  thrust::device_vector<uint64_t> ::iterator _begin;
  thrust::device_vector<uint64_t> ::iterator _end;
  PyObject *dtype;
  PyObject *ctype;
};


/* "cythrust/cuda/device_vector/float32/device_vector.pxd":18
 * 
 * 
 * cdef class DeviceVector:             # <<<<<<<<<<<<<<
 *     cdef device_vector[float] *_vector
 *     cdef object dtype
 */
struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVector {
  PyObject_HEAD
  thrust::device_vector<float>  *_vector;
  PyObject *dtype;
  PyObject *ctype;
};


/* "cythrust/cuda/device_vector/float32/device_vector.pxd":24
 * 
 * 
 * cdef class DeviceVectorView:             # <<<<<<<<<<<<<<
 *     cdef device_vector[float] *_vector
 *     cdef device_vector[float].iterator _begin
 */
struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView {
  PyObject_HEAD
  thrust::device_vector<float>  *_vector;
  thrust::device_vector<float> ::iterator _begin;
  thrust::device_vector<float> ::iterator _end;
  PyObject *dtype;
  PyObject *ctype;
};


/* "cythrust/cuda/device_vector/float64/device_vector.pxd":18
 * 
 * 
 * cdef class DeviceVector:             # <<<<<<<<<<<<<<
 *     cdef device_vector[double] *_vector
 *     cdef object dtype
 */
struct __pyx_obj_8cythrust_4cuda_13device_vector_7float64_13device_vector_DeviceVector {
  PyObject_HEAD
  thrust::device_vector<double>  *_vector;
  PyObject *dtype;
  PyObject *ctype;
};


/* "cythrust/cuda/device_vector/float64/device_vector.pxd":24
 * 
 * 
 * cdef class DeviceVectorView:             # <<<<<<<<<<<<<<
 *     cdef device_vector[double] *_vector
 *     cdef device_vector[double].iterator _begin
 */
struct __pyx_obj_8cythrust_4cuda_13device_vector_7float64_13device_vector_DeviceVectorView {
  PyObject_HEAD
  thrust::device_vector<double>  *_vector;
  thrust::device_vector<double> ::iterator _begin;
  thrust::device_vector<double> ::iterator _end;
  PyObject *dtype;
  PyObject *ctype;
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name);

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

#include <new>

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if (defined(_WIN32) || defined(__clang__)) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.stdint' */

/* Module declarations from 'cythrust.thrust.device_vector' */

/* Module declarations from 'cythrust.thrust.partition' */

/* Module declarations from 'cythrust.thrust.pair' */

/* Module declarations from 'cythrust.thrust.extrema' */

/* Module declarations from 'cythrust.thrust.sort' */

/* Module declarations from 'cythrust.thrust.scatter' */

/* Module declarations from 'cythrust.thrust.fill' */

/* Module declarations from 'cythrust.thrust.transform' */

/* Module declarations from 'cythrust.thrust.iterator.constant_iterator' */

/* Module declarations from 'cythrust.thrust.iterator.transform_iterator' */

/* Module declarations from 'cythrust.thrust.iterator.iterator_traits' */

/* Module declarations from 'cythrust.thrust.reduce' */

/* Module declarations from 'cythrust.thrust.functional' */

/* Module declarations from 'cythrust.thrust.tuple' */

/* Module declarations from 'cythrust.thrust.iterator.permutation_iterator' */

/* Module declarations from 'cythrust.thrust.iterator.zip_iterator' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'cythrust.cuda.device_vector.int8.device_vector' */
static PyTypeObject *__pyx_ptype_8cythrust_4cuda_13device_vector_4int8_13device_vector_DeviceVector = 0;
static PyTypeObject *__pyx_ptype_8cythrust_4cuda_13device_vector_4int8_13device_vector_DeviceVectorView = 0;

/* Module declarations from 'cythrust.cuda.device_vector.uint8.device_vector' */
static PyTypeObject *__pyx_ptype_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVector = 0;
static PyTypeObject *__pyx_ptype_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView = 0;

/* Module declarations from 'cythrust.cuda.device_vector.int16.device_vector' */
static PyTypeObject *__pyx_ptype_8cythrust_4cuda_13device_vector_5int16_13device_vector_DeviceVector = 0;
static PyTypeObject *__pyx_ptype_8cythrust_4cuda_13device_vector_5int16_13device_vector_DeviceVectorView = 0;

/* Module declarations from 'cythrust.cuda.device_vector.uint16.device_vector' */
static PyTypeObject *__pyx_ptype_8cythrust_4cuda_13device_vector_6uint16_13device_vector_DeviceVector = 0;
static PyTypeObject *__pyx_ptype_8cythrust_4cuda_13device_vector_6uint16_13device_vector_DeviceVectorView = 0;

/* Module declarations from 'cythrust.cuda.device_vector.int32.device_vector' */
static PyTypeObject *__pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVector = 0;
static PyTypeObject *__pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView = 0;

/* Module declarations from 'cythrust.cuda.device_vector.uint32.device_vector' */
static PyTypeObject *__pyx_ptype_8cythrust_4cuda_13device_vector_6uint32_13device_vector_DeviceVector = 0;
static PyTypeObject *__pyx_ptype_8cythrust_4cuda_13device_vector_6uint32_13device_vector_DeviceVectorView = 0;

/* Module declarations from 'cythrust.cuda.device_vector.int64.device_vector' */
static PyTypeObject *__pyx_ptype_8cythrust_4cuda_13device_vector_5int64_13device_vector_DeviceVector = 0;
static PyTypeObject *__pyx_ptype_8cythrust_4cuda_13device_vector_5int64_13device_vector_DeviceVectorView = 0;

/* Module declarations from 'cythrust.cuda.device_vector.uint64.device_vector' */
static PyTypeObject *__pyx_ptype_8cythrust_4cuda_13device_vector_6uint64_13device_vector_DeviceVector = 0;
static PyTypeObject *__pyx_ptype_8cythrust_4cuda_13device_vector_6uint64_13device_vector_DeviceVectorView = 0;

/* Module declarations from 'cythrust.cuda.device_vector.float32.device_vector' */
static PyTypeObject *__pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVector = 0;
static PyTypeObject *__pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView = 0;

/* Module declarations from 'cythrust.cuda.device_vector.float64.device_vector' */
static PyTypeObject *__pyx_ptype_8cythrust_4cuda_13device_vector_7float64_13device_vector_DeviceVector = 0;
static PyTypeObject *__pyx_ptype_8cythrust_4cuda_13device_vector_7float64_13device_vector_DeviceVectorView = 0;

/* Module declarations from 'cythrust.cuda.device_vector' */

/* Module declarations from 'cythrust.thrust.copy' */

/* Module declarations from 'cythrust.thrust.replace' */

/* Module declarations from 'thrust_timing.cuda.SORT_TIMING' */
static PyObject *__pyx_f_13thrust_timing_4cuda_11SORT_TIMING_fill_longest_paths(struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_13thrust_timing_4cuda_11SORT_TIMING_look_up_delay(struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *, struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *, int32_t, int32_t, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_13thrust_timing_4cuda_11SORT_TIMING_look_up_delay_prime(struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *, struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *, int32_t, int32_t, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *, int __pyx_skip_dispatch); /*proto*/
#define __Pyx_MODULE_NAME "thrust_timing.cuda.SORT_TIMING"
int __pyx_module_is_main_thrust_timing__cuda__SORT_TIMING = 0;

/* Implementation of 'thrust_timing.cuda.SORT_TIMING' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_sort_by_target_key(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_source_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_source, struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_target, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay); /* proto */
static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_2reset_block_min_source_longest_path(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_block_min_source_longest_path); /* proto */
static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_4step1(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_longest_paths, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_source_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_source_longest_path); /* proto */
static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_6step2(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_source, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_source_longest_path); /* proto */
static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_8step3(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_source_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key, CYTHON_UNUSED struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_source, CYTHON_UNUSED struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_target, CYTHON_UNUSED struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay, CYTHON_UNUSED struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_target_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_min_source_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_source_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_reduced_keys); /* proto */
static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_10step4(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_block_min_source_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_min_source_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_reduced_keys, size_t __pyx_v_unique_block_count); /* proto */
static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_12step5(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_block_min_source_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_min_source_longest_path); /* proto */
static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_14step6(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_source_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_source, struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_target, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_target_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_min_source_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_source_longest_path); /* proto */
static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_16step7(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay, size_t __pyx_v_ready_connection_count); /* proto */
static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_18step8(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_target_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_source_longest_path, size_t __pyx_v_ready_connection_count); /* proto */
static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_20step9(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_target_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_max_target_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_reduced_keys, size_t __pyx_v_ready_connection_count); /* proto */
static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_22step10(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_longest_paths, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_max_target_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_reduced_keys, size_t __pyx_v_resolved_block_count); /* proto */
static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_24scatter_longest_paths(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVector *__pyx_v_longest_paths, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_max_target_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_reduced_keys, size_t __pyx_v_resolved_block_count); /* proto */
static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_26fill_longest_paths(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_external_block_keys, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_sync_logic_block_keys, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_single_connection_blocks, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_longest_paths); /* proto */
static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_28look_up_delay(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_source_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_delay_type, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_x, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_y, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arch_delays, int32_t __pyx_v_nrows, int32_t __pyx_v_ncols, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay); /* proto */
static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_30look_up_delay_prime(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_source_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_delay_type, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_x, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_y, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_x_prime, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_y_prime, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arch_delays, int32_t __pyx_v_nrows, int32_t __pyx_v_ncols, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay); /* proto */
static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_32connection_criticality(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arrival_times, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_departure_times, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_driver_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_sink_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_criticality); /* proto */
static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_34connection_cost(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_criticality_exp, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arrival_times, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_departure_times, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_driver_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_sink_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_cost, float __pyx_v_critical_path); /* proto */
static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_36block_delta_timing_cost(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_arrival_target_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arrival_cost, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arrival_cost_prime, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_departure_target_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_departure_cost, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_departure_cost_prime, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_arrival_reduced_keys, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_departure_reduced_keys, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arrival_reduced_target_cost, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_departure_reduced_target_cost, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_block_arrival_cost, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_block_departure_cost); /* proto */
static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_38compute_normalized_weighted_sum(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_alpha, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_a, float __pyx_v_a_max, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_b, float __pyx_v_b_max, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_output); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static char __pyx_k_B[] = "B";
static char __pyx_k_H[] = "H";
static char __pyx_k_I[] = "I";
static char __pyx_k_L[] = "L";
static char __pyx_k_O[] = "O";
static char __pyx_k_Q[] = "Q";
static char __pyx_k_a[] = "a";
static char __pyx_k_b[] = "b";
static char __pyx_k_d[] = "d";
static char __pyx_k_f[] = "f";
static char __pyx_k_g[] = "g";
static char __pyx_k_h[] = "h";
static char __pyx_k_i[] = "i";
static char __pyx_k_l[] = "l";
static char __pyx_k_q[] = "q";
static char __pyx_k_Zd[] = "Zd";
static char __pyx_k_Zf[] = "Zf";
static char __pyx_k_Zg[] = "Zg";
static char __pyx_k_p_x[] = "p_x";
static char __pyx_k_p_y[] = "p_y";
static char __pyx_k_cost[] = "cost";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_size[] = "size";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_a_max[] = "a_max";
static char __pyx_k_alpha[] = "alpha";
static char __pyx_k_b_max[] = "b_max";
static char __pyx_k_delay[] = "delay";
static char __pyx_k_ncols[] = "ncols";
static char __pyx_k_nrows[] = "nrows";
static char __pyx_k_range[] = "range";
static char __pyx_k_step1[] = "step1";
static char __pyx_k_step2[] = "step2";
static char __pyx_k_step3[] = "step3";
static char __pyx_k_step4[] = "step4";
static char __pyx_k_step5[] = "step5";
static char __pyx_k_step6[] = "step6";
static char __pyx_k_step7[] = "step7";
static char __pyx_k_step8[] = "step8";
static char __pyx_k_step9[] = "step9";
static char __pyx_k_w_sum[] = "w_sum";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_output[] = "output";
static char __pyx_k_plus_f[] = "plus_f";
static char __pyx_k_step10[] = "step10";
static char __pyx_k_minus_f[] = "minus_f";
static char __pyx_k_equal_to[] = "equal_to";
static char __pyx_k_sink_key[] = "sink_key";
static char __pyx_k_maximum_f[] = "maximum_f";
static char __pyx_k_minimum_f[] = "minimum_f";
static char __pyx_k_p_x_prime[] = "p_x_prime";
static char __pyx_k_p_y_prime[] = "p_y_prime";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_delay_type[] = "delay_type";
static char __pyx_k_driver_key[] = "driver_key";
static char __pyx_k_positive_f[] = "positive_f";
static char __pyx_k_source_key[] = "source_key";
static char __pyx_k_target_key[] = "target_key";
static char __pyx_k_arch_delays[] = "arch_delays";
static char __pyx_k_criticality[] = "criticality";
static char __pyx_k_sync_source[] = "sync_source";
static char __pyx_k_sync_target[] = "sync_target";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_arrival_cost[] = "arrival_cost";
static char __pyx_k_reduced_keys[] = "reduced_keys";
static char __pyx_k_arrival_times[] = "arrival_times";
static char __pyx_k_critical_path[] = "critical_path";
static char __pyx_k_longest_paths[] = "longest_paths";
static char __pyx_k_departure_cost[] = "departure_cost";
static char __pyx_k_max_delta_cost[] = "max_delta_cost";
static char __pyx_k_non_negative_f[] = "non_negative_f";
static char __pyx_k_connection_cost[] = "connection_cost";
static char __pyx_k_criticality_exp[] = "criticality_exp";
static char __pyx_k_departure_times[] = "departure_times";
static char __pyx_k_connection_cost_f[] = "connection_cost_f";
static char __pyx_k_arrival_cost_prime[] = "arrival_cost_prime";
static char __pyx_k_arrival_target_key[] = "arrival_target_key";
static char __pyx_k_block_arrival_cost[] = "block_arrival_cost";
static char __pyx_k_sort_by_target_key[] = "sort_by_target_key";
static char __pyx_k_unique_block_count[] = "unique_block_count";
static char __pyx_k_arrival_block_count[] = "arrival_block_count";
static char __pyx_k_external_block_keys[] = "external_block_keys";
static char __pyx_k_source_longest_path[] = "source_longest_path";
static char __pyx_k_target_longest_path[] = "target_longest_path";
static char __pyx_k_arrival_reduced_keys[] = "arrival_reduced_keys";
static char __pyx_k_block_departure_cost[] = "block_departure_cost";
static char __pyx_k_departure_cost_prime[] = "departure_cost_prime";
static char __pyx_k_departure_target_key[] = "departure_target_key";
static char __pyx_k_resolved_block_count[] = "resolved_block_count";
static char __pyx_k_departure_block_count[] = "departure_block_count";
static char __pyx_k_scatter_longest_paths[] = "scatter_longest_paths";
static char __pyx_k_sync_logic_block_keys[] = "sync_logic_block_keys";
static char __pyx_k_connection_criticality[] = "connection_criticality";
static char __pyx_k_departure_reduced_keys[] = "departure_reduced_keys";
static char __pyx_k_ready_connection_count[] = "ready_connection_count";
static char __pyx_k_block_delta_timing_cost[] = "block_delta_timing_cost";
static char __pyx_k_max_target_longest_path[] = "max_target_longest_path";
static char __pyx_k_min_source_longest_path[] = "min_source_longest_path";
static char __pyx_k_connection_criticality_f[] = "connection_criticality_f";
static char __pyx_k_single_connection_blocks[] = "single_connection_blocks";
static char __pyx_k_unpacked_connection_cost[] = "unpacked_connection_cost";
static char __pyx_k_arrival_reduced_target_cost[] = "arrival_reduced_target_cost";
static char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static char __pyx_k_block_min_source_longest_path[] = "block_min_source_longest_path";
static char __pyx_k_departure_reduced_target_cost[] = "departure_reduced_target_cost";
static char __pyx_k_home_christian_virtualenvs_vpr[] = "/home/christian/.virtualenvs/vpr/src/thrust-timing/thrust_timing/cuda/SORT_TIMING.pyx";
static char __pyx_k_thrust_timing_cuda_SORT_TIMING[] = "thrust_timing.cuda.SORT_TIMING";
static char __pyx_k_compute_normalized_weighted_sum[] = "compute_normalized_weighted_sum";
static char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_unpacked_connection_criticality[] = "unpacked_connection_criticality";
static char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static char __pyx_k_reset_block_min_source_longest_p[] = "reset_block_min_source_longest_path";
static char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_a_max;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_n_s_arch_delays;
static PyObject *__pyx_n_s_arrival_block_count;
static PyObject *__pyx_n_s_arrival_cost;
static PyObject *__pyx_n_s_arrival_cost_prime;
static PyObject *__pyx_n_s_arrival_reduced_keys;
static PyObject *__pyx_n_s_arrival_reduced_target_cost;
static PyObject *__pyx_n_s_arrival_target_key;
static PyObject *__pyx_n_s_arrival_times;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_b_max;
static PyObject *__pyx_n_s_block_arrival_cost;
static PyObject *__pyx_n_s_block_delta_timing_cost;
static PyObject *__pyx_n_s_block_departure_cost;
static PyObject *__pyx_n_s_block_min_source_longest_path;
static PyObject *__pyx_n_s_compute_normalized_weighted_sum;
static PyObject *__pyx_n_s_connection_cost;
static PyObject *__pyx_n_s_connection_cost_f;
static PyObject *__pyx_n_s_connection_criticality;
static PyObject *__pyx_n_s_connection_criticality_f;
static PyObject *__pyx_n_s_cost;
static PyObject *__pyx_n_s_critical_path;
static PyObject *__pyx_n_s_criticality;
static PyObject *__pyx_n_s_criticality_exp;
static PyObject *__pyx_n_s_delay;
static PyObject *__pyx_n_s_delay_type;
static PyObject *__pyx_n_s_departure_block_count;
static PyObject *__pyx_n_s_departure_cost;
static PyObject *__pyx_n_s_departure_cost_prime;
static PyObject *__pyx_n_s_departure_reduced_keys;
static PyObject *__pyx_n_s_departure_reduced_target_cost;
static PyObject *__pyx_n_s_departure_target_key;
static PyObject *__pyx_n_s_departure_times;
static PyObject *__pyx_n_s_driver_key;
static PyObject *__pyx_n_s_equal_to;
static PyObject *__pyx_n_s_external_block_keys;
static PyObject *__pyx_kp_s_home_christian_virtualenvs_vpr;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_longest_paths;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_delta_cost;
static PyObject *__pyx_n_s_max_target_longest_path;
static PyObject *__pyx_n_s_maximum_f;
static PyObject *__pyx_n_s_min_source_longest_path;
static PyObject *__pyx_n_s_minimum_f;
static PyObject *__pyx_n_s_minus_f;
static PyObject *__pyx_n_s_ncols;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_non_negative_f;
static PyObject *__pyx_n_s_nrows;
static PyObject *__pyx_n_s_output;
static PyObject *__pyx_n_s_p_x;
static PyObject *__pyx_n_s_p_x_prime;
static PyObject *__pyx_n_s_p_y;
static PyObject *__pyx_n_s_p_y_prime;
static PyObject *__pyx_n_s_plus_f;
static PyObject *__pyx_n_s_positive_f;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_ready_connection_count;
static PyObject *__pyx_n_s_reduced_keys;
static PyObject *__pyx_n_s_reset_block_min_source_longest_p;
static PyObject *__pyx_n_s_resolved_block_count;
static PyObject *__pyx_n_s_scatter_longest_paths;
static PyObject *__pyx_n_s_single_connection_blocks;
static PyObject *__pyx_n_s_sink_key;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_sort_by_target_key;
static PyObject *__pyx_n_s_source_key;
static PyObject *__pyx_n_s_source_longest_path;
static PyObject *__pyx_n_s_step1;
static PyObject *__pyx_n_s_step10;
static PyObject *__pyx_n_s_step2;
static PyObject *__pyx_n_s_step3;
static PyObject *__pyx_n_s_step4;
static PyObject *__pyx_n_s_step5;
static PyObject *__pyx_n_s_step6;
static PyObject *__pyx_n_s_step7;
static PyObject *__pyx_n_s_step8;
static PyObject *__pyx_n_s_step9;
static PyObject *__pyx_n_s_sync_logic_block_keys;
static PyObject *__pyx_n_s_sync_source;
static PyObject *__pyx_n_s_sync_target;
static PyObject *__pyx_n_s_target_key;
static PyObject *__pyx_n_s_target_longest_path;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_thrust_timing_cuda_SORT_TIMING;
static PyObject *__pyx_n_s_unique_block_count;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_unpacked_connection_cost;
static PyObject *__pyx_n_s_unpacked_connection_criticality;
static PyObject *__pyx_n_s_w_sum;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__36;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__40;

/* "thrust_timing/cuda/SORT_TIMING.pyx":46
 * 
 * 
 * def sort_by_target_key(DeviceVectorViewInt32 source_key,             # <<<<<<<<<<<<<<
 *                        DeviceVectorViewInt32 target_key,
 *                        DeviceVectorViewUint8 sync_source,
 */

/* Python wrapper */
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_1sort_by_target_key(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_sort_by_target_key[] = "sort_by_target_key(DeviceVectorView source_key, DeviceVectorView target_key, DeviceVectorView sync_source, DeviceVectorView sync_target, DeviceVectorView delay)";
static PyMethodDef __pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_1sort_by_target_key = {"sort_by_target_key", (PyCFunction)__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_1sort_by_target_key, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_sort_by_target_key};
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_1sort_by_target_key(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_source_key = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_source = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_target = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sort_by_target_key (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_key,&__pyx_n_s_target_key,&__pyx_n_s_sync_source,&__pyx_n_s_sync_target,&__pyx_n_s_delay,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_source_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_target_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sort_by_target_key", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sync_source)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sort_by_target_key", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sync_target)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sort_by_target_key", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_delay)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("sort_by_target_key", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sort_by_target_key") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_source_key = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[0]);
    __pyx_v_target_key = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[1]);
    __pyx_v_sync_source = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *)values[2]);
    __pyx_v_sync_target = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *)values[3]);
    __pyx_v_delay = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sort_by_target_key", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.sort_by_target_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_source_key), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "source_key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_target_key), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "target_key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sync_source), __pyx_ptype_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView, 1, "sync_source", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sync_target), __pyx_ptype_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView, 1, "sync_target", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_delay), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "delay", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_sort_by_target_key(__pyx_self, __pyx_v_source_key, __pyx_v_target_key, __pyx_v_sync_source, __pyx_v_sync_target, __pyx_v_delay);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_sort_by_target_key(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_source_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_source, struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_target, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sort_by_target_key", 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":51
 *                        DeviceVectorViewUint8 sync_target,
 *                        DeviceVectorViewFloat32 delay):
 *     sort_by_key(target_key._begin, target_key._end,             # <<<<<<<<<<<<<<
 *                 make_zip_iterator(make_tuple4(source_key._begin,
 *                                               sync_source._begin,
 */
  thrust::sort_by_key<thrust::device_vector<int32_t> ::iterator,thrust::zip_iterator<thrust::tuple<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<uint8_t> ::iterator,thrust::device_vector<uint8_t> ::iterator,thrust::device_vector<float> ::iterator> > >(__pyx_v_target_key->_begin, __pyx_v_target_key->_end, thrust::make_zip_iterator<thrust::tuple<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<uint8_t> ::iterator,thrust::device_vector<uint8_t> ::iterator,thrust::device_vector<float> ::iterator> >(thrust::make_tuple<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<uint8_t> ::iterator,thrust::device_vector<uint8_t> ::iterator,thrust::device_vector<float> ::iterator>(__pyx_v_source_key->_begin, __pyx_v_sync_source->_begin, __pyx_v_sync_target->_begin, __pyx_v_delay->_begin)));

  /* "thrust_timing/cuda/SORT_TIMING.pyx":46
 * 
 * 
 * def sort_by_target_key(DeviceVectorViewInt32 source_key,             # <<<<<<<<<<<<<<
 *                        DeviceVectorViewInt32 target_key,
 *                        DeviceVectorViewUint8 sync_source,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrust_timing/cuda/SORT_TIMING.pyx":58
 * 
 * 
 * def reset_block_min_source_longest_path(             # <<<<<<<<<<<<<<
 *     DeviceVectorViewFloat32 block_min_source_longest_path):
 *     # Equivalent to:
 */

/* Python wrapper */
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_3reset_block_min_source_longest_path(PyObject *__pyx_self, PyObject *__pyx_v_block_min_source_longest_path); /*proto*/
static char __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_2reset_block_min_source_longest_path[] = "reset_block_min_source_longest_path(DeviceVectorView block_min_source_longest_path)";
static PyMethodDef __pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_3reset_block_min_source_longest_path = {"reset_block_min_source_longest_path", (PyCFunction)__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_3reset_block_min_source_longest_path, METH_O, __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_2reset_block_min_source_longest_path};
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_3reset_block_min_source_longest_path(PyObject *__pyx_self, PyObject *__pyx_v_block_min_source_longest_path) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_block_min_source_longest_path (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_block_min_source_longest_path), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "block_min_source_longest_path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_2reset_block_min_source_longest_path(__pyx_self, ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)__pyx_v_block_min_source_longest_path));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_2reset_block_min_source_longest_path(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_block_min_source_longest_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_block_min_source_longest_path", 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":63
 *     #
 *     #     block_min_source_longest_path[:] = -1e6
 *     fill(block_min_source_longest_path._begin,             # <<<<<<<<<<<<<<
 *          block_min_source_longest_path._end, <float>(-1e6))
 * 
 */
  thrust::fill<thrust::device_vector<float> ::iterator,float>(__pyx_v_block_min_source_longest_path->_begin, __pyx_v_block_min_source_longest_path->_end, ((float)-1e6));

  /* "thrust_timing/cuda/SORT_TIMING.pyx":58
 * 
 * 
 * def reset_block_min_source_longest_path(             # <<<<<<<<<<<<<<
 *     DeviceVectorViewFloat32 block_min_source_longest_path):
 *     # Equivalent to:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrust_timing/cuda/SORT_TIMING.pyx":67
 * 
 * 
 * def step1(DeviceVectorViewFloat32 longest_paths,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewInt32 source_key,
 *           DeviceVectorViewFloat32 source_longest_path):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_5step1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_4step1[] = "step1(DeviceVectorView longest_paths, DeviceVectorView source_key, DeviceVectorView source_longest_path)\n\n    Load the current longest path for the source block of each connection.\n\n    Equivalent to:\n\n        connections['source_longest_path'] = longest_paths[connections\n                                                           .loc[:, 'source_key']\n                                                           .values]\n    ";
static PyMethodDef __pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_5step1 = {"step1", (PyCFunction)__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_5step1, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_4step1};
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_5step1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_longest_paths = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_source_key = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_source_longest_path = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step1 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_longest_paths,&__pyx_n_s_source_key,&__pyx_n_s_source_longest_path,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_longest_paths)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_source_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step1", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_source_longest_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step1", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "step1") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_longest_paths = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[0]);
    __pyx_v_source_key = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[1]);
    __pyx_v_source_longest_path = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("step1", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.step1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_longest_paths), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "longest_paths", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_source_key), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "source_key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_source_longest_path), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "source_longest_path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_4step1(__pyx_self, __pyx_v_longest_paths, __pyx_v_source_key, __pyx_v_source_longest_path);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_4step1(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_longest_paths, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_source_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_source_longest_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step1", 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":79
 *                                                            .values]
 *     '''
 *     copy(make_permutation_iterator(longest_paths._vector.begin(), source_key._begin),             # <<<<<<<<<<<<<<
 *          make_permutation_iterator(longest_paths._vector.begin(), source_key._end),
 *          source_longest_path._begin)
 */
  thrust::copy<thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::device_vector<float> ::iterator>(thrust::make_permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_longest_paths->_vector->begin(), __pyx_v_source_key->_begin), thrust::make_permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_longest_paths->_vector->begin(), __pyx_v_source_key->_end), __pyx_v_source_longest_path->_begin);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":67
 * 
 * 
 * def step1(DeviceVectorViewFloat32 longest_paths,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewInt32 source_key,
 *           DeviceVectorViewFloat32 source_longest_path):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrust_timing/cuda/SORT_TIMING.pyx":84
 * 
 * 
 * def step2(DeviceVectorViewUint8 sync_source,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewFloat32 source_longest_path):
 *     '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_7step2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_6step2[] = "step2(DeviceVectorView sync_source, DeviceVectorView source_longest_path)\n\n    If the source of a connection is a synchronous source _(i.e., a synchronous\n    logic block, an input, or an output)_, set the source longest path of the\n    connection to zero.  This is because synchronous blocks are the end-points\n    of path delays.\n\n    Equivalent to:\n\n        connections.loc[connections.sync_source > 0, 'source_longest_path'] = 0\n    ";
static PyMethodDef __pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_7step2 = {"step2", (PyCFunction)__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_7step2, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_6step2};
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_7step2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_source = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_source_longest_path = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sync_source,&__pyx_n_s_source_longest_path,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sync_source)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_source_longest_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step2", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "step2") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_sync_source = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *)values[0]);
    __pyx_v_source_longest_path = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("step2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.step2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sync_source), __pyx_ptype_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView, 1, "sync_source", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_source_longest_path), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "source_longest_path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_6step2(__pyx_self, __pyx_v_sync_source, __pyx_v_source_longest_path);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_6step2(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_source, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_source_longest_path) {
  cythrust::positive<uint8_t>  __pyx_v_positive_f;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step2", 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":97
 *     '''
 *     cdef positive[uint8_t] positive_f
 *     replace_if_w_stencil(source_longest_path._begin, source_longest_path._end,             # <<<<<<<<<<<<<<
 *                          sync_source._begin, positive_f, 0)
 * 
 */
  thrust::replace_if<thrust::device_vector<float> ::iterator,thrust::device_vector<uint8_t> ::iterator,cythrust::positive<uint8_t> ,long>(__pyx_v_source_longest_path->_begin, __pyx_v_source_longest_path->_end, __pyx_v_sync_source->_begin, __pyx_v_positive_f, 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":84
 * 
 * 
 * def step2(DeviceVectorViewUint8 sync_source,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewFloat32 source_longest_path):
 *     '''
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrust_timing/cuda/SORT_TIMING.pyx":101
 * 
 * 
 * def step3(DeviceVectorViewInt32 source_key,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewInt32 target_key,
 *           DeviceVectorViewUint8 sync_source,
 */

/* Python wrapper */
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_9step3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_8step3[] = "step3(DeviceVectorView source_key, DeviceVectorView target_key, DeviceVectorView sync_source, DeviceVectorView sync_target, DeviceVectorView delay, DeviceVectorView target_longest_path, DeviceVectorView min_source_longest_path, DeviceVectorView source_longest_path, DeviceVectorView reduced_keys)\n\n    Determine which target blocks have the longest path for sources of all\n    _incoming_ connections resolved.\n\n    For each block, this is accomplished by computing the minimum source\n    longest path of all connections targeting the block.  If the minimum source\n    longest path is less than zero, there is _at least one_ incoming connection\n    that is not resolved.  A category reduction is used to efficiently compute\n    the minimum-per-target-block.\n\n\n    Notes\n    =====\n\n    Data **must** be sorted by **`target_key`** before calling this function to\n    work as expected.\n    ";
static PyMethodDef __pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_9step3 = {"step3", (PyCFunction)__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_9step3, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_8step3};
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_9step3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_source_key = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key = 0;
  CYTHON_UNUSED struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_source = 0;
  CYTHON_UNUSED struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_target = 0;
  CYTHON_UNUSED struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay = 0;
  CYTHON_UNUSED struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_target_longest_path = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_min_source_longest_path = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_source_longest_path = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_reduced_keys = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_key,&__pyx_n_s_target_key,&__pyx_n_s_sync_source,&__pyx_n_s_sync_target,&__pyx_n_s_delay,&__pyx_n_s_target_longest_path,&__pyx_n_s_min_source_longest_path,&__pyx_n_s_source_longest_path,&__pyx_n_s_reduced_keys,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_source_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_target_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step3", 1, 9, 9, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sync_source)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step3", 1, 9, 9, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sync_target)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step3", 1, 9, 9, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_delay)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step3", 1, 9, 9, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_target_longest_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step3", 1, 9, 9, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_source_longest_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step3", 1, 9, 9, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_source_longest_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step3", 1, 9, 9, 7); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_reduced_keys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step3", 1, 9, 9, 8); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "step3") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_source_key = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[0]);
    __pyx_v_target_key = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[1]);
    __pyx_v_sync_source = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *)values[2]);
    __pyx_v_sync_target = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *)values[3]);
    __pyx_v_delay = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[4]);
    __pyx_v_target_longest_path = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[5]);
    __pyx_v_min_source_longest_path = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[6]);
    __pyx_v_source_longest_path = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[7]);
    __pyx_v_reduced_keys = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[8]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("step3", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.step3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_source_key), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "source_key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_target_key), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "target_key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sync_source), __pyx_ptype_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView, 1, "sync_source", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sync_target), __pyx_ptype_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView, 1, "sync_target", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_delay), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "delay", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_target_longest_path), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "target_longest_path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_min_source_longest_path), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "min_source_longest_path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_source_longest_path), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "source_longest_path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reduced_keys), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "reduced_keys", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_8step3(__pyx_self, __pyx_v_source_key, __pyx_v_target_key, __pyx_v_sync_source, __pyx_v_sync_target, __pyx_v_delay, __pyx_v_target_longest_path, __pyx_v_min_source_longest_path, __pyx_v_source_longest_path, __pyx_v_reduced_keys);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_8step3(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_source_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key, CYTHON_UNUSED struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_source, CYTHON_UNUSED struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_target, CYTHON_UNUSED struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay, CYTHON_UNUSED struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_target_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_min_source_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_source_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_reduced_keys) {
  thrust::equal_to<int32_t>  __pyx_v_equal_to;
  thrust::minimum<float>  __pyx_v_minimum_f;
  size_t __pyx_v_unique_block_count;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("step3", 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":135
 *             target_key._begin, target_key._end, source_longest_path._begin,
 *             reduced_keys._begin, min_source_longest_path._begin, equal_to,
 *             minimum_f).first -             # <<<<<<<<<<<<<<
 *         <device_vector[int32_t].iterator>reduced_keys._begin)
 *     return unique_block_count
 */
  __pyx_v_unique_block_count = (((thrust::device_vector<int32_t> ::iterator)thrust::reduce_by_key<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator,thrust::device_vector<float> ::iterator,thrust::equal_to<int32_t> ,thrust::minimum<float> >(__pyx_v_target_key->_begin, __pyx_v_target_key->_end, __pyx_v_source_longest_path->_begin, __pyx_v_reduced_keys->_begin, __pyx_v_min_source_longest_path->_begin, __pyx_v_equal_to, __pyx_v_minimum_f).first) - ((thrust::device_vector<int32_t> ::iterator)__pyx_v_reduced_keys->_begin));

  /* "thrust_timing/cuda/SORT_TIMING.pyx":137
 *             minimum_f).first -
 *         <device_vector[int32_t].iterator>reduced_keys._begin)
 *     return unique_block_count             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_unique_block_count); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":101
 * 
 * 
 * def step3(DeviceVectorViewInt32 source_key,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewInt32 target_key,
 *           DeviceVectorViewUint8 sync_source,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.step3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrust_timing/cuda/SORT_TIMING.pyx":140
 * 
 * 
 * def step4(DeviceVectorViewFloat32 block_min_source_longest_path,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewFloat32 min_source_longest_path,
 *           DeviceVectorViewInt32 reduced_keys, size_t unique_block_count):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_11step4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_10step4[] = "step4(DeviceVectorView block_min_source_longest_path, DeviceVectorView min_source_longest_path, DeviceVectorView reduced_keys, size_t unique_block_count)\n\n    Scatter the reduced target-block-key/minimum-source-path to the\n    corresponding positions in the block-indexed array containing the minimum\n    source longest path for each block _(`block_min_source_longest_path`)_.\n\n    Given a target block key, the `block_min_source_longest_path` provides\n    constant-time look-up for the corresponding minimum source longest-path.\n\n    Equivalent to:\n\n        block_min_source_longest_path[min_source_longest_path.index] = min_source_longest_path.values\n    ";
static PyMethodDef __pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_11step4 = {"step4", (PyCFunction)__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_11step4, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_10step4};
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_11step4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_block_min_source_longest_path = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_min_source_longest_path = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_reduced_keys = 0;
  size_t __pyx_v_unique_block_count;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_block_min_source_longest_path,&__pyx_n_s_min_source_longest_path,&__pyx_n_s_reduced_keys,&__pyx_n_s_unique_block_count,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_block_min_source_longest_path)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_source_longest_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step4", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_reduced_keys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step4", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_unique_block_count)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step4", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "step4") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_block_min_source_longest_path = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[0]);
    __pyx_v_min_source_longest_path = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[1]);
    __pyx_v_reduced_keys = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[2]);
    __pyx_v_unique_block_count = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_unique_block_count == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("step4", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.step4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_block_min_source_longest_path), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "block_min_source_longest_path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_min_source_longest_path), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "min_source_longest_path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reduced_keys), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "reduced_keys", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_10step4(__pyx_self, __pyx_v_block_min_source_longest_path, __pyx_v_min_source_longest_path, __pyx_v_reduced_keys, __pyx_v_unique_block_count);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_10step4(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_block_min_source_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_min_source_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_reduced_keys, size_t __pyx_v_unique_block_count) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step4", 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":158
 * 
 *     # block_min_source_longest_path[min_source_longest_path.index] = min_source_longest_path.values
 *     copy_n(min_source_longest_path._begin, unique_block_count,             # <<<<<<<<<<<<<<
 *            make_permutation_iterator(block_min_source_longest_path._begin,
 *                                      reduced_keys._begin))
 */
  thrust::copy_n<thrust::device_vector<float> ::iterator,size_t,thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> >(__pyx_v_min_source_longest_path->_begin, __pyx_v_unique_block_count, thrust::make_permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_block_min_source_longest_path->_begin, __pyx_v_reduced_keys->_begin));

  /* "thrust_timing/cuda/SORT_TIMING.pyx":140
 * 
 * 
 * def step4(DeviceVectorViewFloat32 block_min_source_longest_path,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewFloat32 min_source_longest_path,
 *           DeviceVectorViewInt32 reduced_keys, size_t unique_block_count):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrust_timing/cuda/SORT_TIMING.pyx":163
 * 
 * 
 * def step5(DeviceVectorViewFloat32 block_min_source_longest_path,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewInt32 target_key,
 *           DeviceVectorViewFloat32 min_source_longest_path):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_13step5(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_12step5[] = "step5(DeviceVectorView block_min_source_longest_path, DeviceVectorView target_key, DeviceVectorView min_source_longest_path)\n\n    Load the minimum source block longest path for the target block of each\n    connection.  This effectively marks each connection according to whether or\n    not all connections targeting the target block of the connection have been\n    resolved.\n\n    The `block_min_source_longest_path` is accessed, permuted by the target key\n    of each connection, to load the minimum source longest path of the\n    connection in constant time.\n\n    Equivalent to:\n\n        connections.min_source_longest_path = block_min_source_longest_path[connections.target_key.values].values\n    ";
static PyMethodDef __pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_13step5 = {"step5", (PyCFunction)__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_13step5, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_12step5};
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_13step5(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_block_min_source_longest_path = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_min_source_longest_path = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step5 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_block_min_source_longest_path,&__pyx_n_s_target_key,&__pyx_n_s_min_source_longest_path,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_block_min_source_longest_path)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_target_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step5", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_source_longest_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step5", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "step5") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_block_min_source_longest_path = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[0]);
    __pyx_v_target_key = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[1]);
    __pyx_v_min_source_longest_path = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("step5", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.step5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_block_min_source_longest_path), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "block_min_source_longest_path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_target_key), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "target_key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_min_source_longest_path), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "min_source_longest_path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_12step5(__pyx_self, __pyx_v_block_min_source_longest_path, __pyx_v_target_key, __pyx_v_min_source_longest_path);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_12step5(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_block_min_source_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_min_source_longest_path) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step5", 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":180
 *         connections.min_source_longest_path = block_min_source_longest_path[connections.target_key.values].values
 *     '''
 *     copy(make_permutation_iterator(block_min_source_longest_path._begin,             # <<<<<<<<<<<<<<
 *                                    target_key._begin),
 *          make_permutation_iterator(block_min_source_longest_path._begin,
 */
  thrust::copy<thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::device_vector<float> ::iterator>(thrust::make_permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_block_min_source_longest_path->_begin, __pyx_v_target_key->_begin), thrust::make_permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_block_min_source_longest_path->_begin, __pyx_v_target_key->_end), __pyx_v_min_source_longest_path->_begin);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":163
 * 
 * 
 * def step5(DeviceVectorViewFloat32 block_min_source_longest_path,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewInt32 target_key,
 *           DeviceVectorViewFloat32 min_source_longest_path):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrust_timing/cuda/SORT_TIMING.pyx":187
 * 
 * 
 * def step6(DeviceVectorViewInt32 source_key,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewInt32 target_key,
 *           DeviceVectorViewUint8 sync_source,
 */

/* Python wrapper */
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_15step6(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_14step6[] = "step6(DeviceVectorView source_key, DeviceVectorView target_key, DeviceVectorView sync_source, DeviceVectorView sync_target, DeviceVectorView target_longest_path, DeviceVectorView min_source_longest_path, DeviceVectorView source_longest_path)\n\n    Partition the list of connections, packing connections with target blocks\n    with all incoming source longest paths resolved to the front of the list,\n    while maintaining relative ordering.\n\n    Note that since relative ordering is maintained, all connections will\n    remained grouped by target key, since all connections with the same target\n    key share the same minimum source longest path value.\n\n\n    Equivalent to:\n\n        connections.sort(['min_source_longest_path', 'target_key'], inplace=True,\n                         ascending=False)\n        ready_connection_count = (connections.min_source_longest_path >= 0).sum()\n    ";
static PyMethodDef __pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_15step6 = {"step6", (PyCFunction)__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_15step6, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_14step6};
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_15step6(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_source_key = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_source = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_target = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_target_longest_path = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_min_source_longest_path = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_source_longest_path = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step6 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_key,&__pyx_n_s_target_key,&__pyx_n_s_sync_source,&__pyx_n_s_sync_target,&__pyx_n_s_target_longest_path,&__pyx_n_s_min_source_longest_path,&__pyx_n_s_source_longest_path,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_source_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_target_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step6", 1, 7, 7, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sync_source)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step6", 1, 7, 7, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sync_target)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step6", 1, 7, 7, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_target_longest_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step6", 1, 7, 7, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_source_longest_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step6", 1, 7, 7, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_source_longest_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step6", 1, 7, 7, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "step6") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_source_key = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[0]);
    __pyx_v_target_key = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[1]);
    __pyx_v_sync_source = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *)values[2]);
    __pyx_v_sync_target = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *)values[3]);
    __pyx_v_target_longest_path = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[4]);
    __pyx_v_min_source_longest_path = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[5]);
    __pyx_v_source_longest_path = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[6]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("step6", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.step6", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_source_key), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "source_key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_target_key), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "target_key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sync_source), __pyx_ptype_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView, 1, "sync_source", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sync_target), __pyx_ptype_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView, 1, "sync_target", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_target_longest_path), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "target_longest_path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_min_source_longest_path), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "min_source_longest_path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_source_longest_path), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "source_longest_path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_14step6(__pyx_self, __pyx_v_source_key, __pyx_v_target_key, __pyx_v_sync_source, __pyx_v_sync_target, __pyx_v_target_longest_path, __pyx_v_min_source_longest_path, __pyx_v_source_longest_path);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_14step6(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_source_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_source, struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_sync_target, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_target_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_min_source_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_source_longest_path) {
  cythrust::non_negative<int32_t>  __pyx_v_non_negative_f;
  PyObject *__pyx_v_ready_connection_count = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("step6", 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":212
 *     cdef non_negative[int32_t] non_negative_f
 * 
 *     cdef ready_connection_count = counted_stable_partition_w_stencil(             # <<<<<<<<<<<<<<
 *         make_zip_iterator(
 *             make_tuple6(source_key._begin, target_key._begin,
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(thrust::counted_stable_partition<thrust::zip_iterator<thrust::tuple<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator,thrust::device_vector<uint8_t> ::iterator,thrust::device_vector<uint8_t> ::iterator,thrust::device_vector<float> ::iterator,thrust::device_vector<float> ::iterator> > ,thrust::device_vector<float> ::iterator,cythrust::non_negative<int32_t> >(thrust::make_zip_iterator<thrust::tuple<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator,thrust::device_vector<uint8_t> ::iterator,thrust::device_vector<uint8_t> ::iterator,thrust::device_vector<float> ::iterator,thrust::device_vector<float> ::iterator> >(thrust::make_tuple<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator,thrust::device_vector<uint8_t> ::iterator,thrust::device_vector<uint8_t> ::iterator,thrust::device_vector<float> ::iterator,thrust::device_vector<float> ::iterator>(__pyx_v_source_key->_begin, __pyx_v_target_key->_begin, __pyx_v_sync_source->_begin, __pyx_v_sync_target->_begin, __pyx_v_target_longest_path->_begin, __pyx_v_source_longest_path->_begin)), thrust::make_zip_iterator<thrust::tuple<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator,thrust::device_vector<uint8_t> ::iterator,thrust::device_vector<uint8_t> ::iterator,thrust::device_vector<float> ::iterator,thrust::device_vector<float> ::iterator> >(thrust::make_tuple<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator,thrust::device_vector<uint8_t> ::iterator,thrust::device_vector<uint8_t> ::iterator,thrust::device_vector<float> ::iterator,thrust::device_vector<float> ::iterator>(__pyx_v_source_key->_end, __pyx_v_target_key->_end, __pyx_v_sync_source->_end, __pyx_v_sync_target->_end, __pyx_v_target_longest_path->_end, __pyx_v_source_longest_path->_end)), __pyx_v_min_source_longest_path->_begin, __pyx_v_non_negative_f)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ready_connection_count = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":223
 *                         source_longest_path._end)),
 *         min_source_longest_path._begin, non_negative_f)
 *     counted_stable_partition(min_source_longest_path._begin,             # <<<<<<<<<<<<<<
 *                              min_source_longest_path._end, non_negative_f)
 *     return ready_connection_count
 */
  thrust::counted_stable_partition<thrust::device_vector<float> ::iterator,cythrust::non_negative<int32_t> >(__pyx_v_min_source_longest_path->_begin, __pyx_v_min_source_longest_path->_end, __pyx_v_non_negative_f);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":225
 *     counted_stable_partition(min_source_longest_path._begin,
 *                              min_source_longest_path._end, non_negative_f)
 *     return ready_connection_count             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ready_connection_count);
  __pyx_r = __pyx_v_ready_connection_count;
  goto __pyx_L0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":187
 * 
 * 
 * def step6(DeviceVectorViewInt32 source_key,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewInt32 target_key,
 *           DeviceVectorViewUint8 sync_source,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.step6", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ready_connection_count);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrust_timing/cuda/SORT_TIMING.pyx":228
 * 
 * 
 * def step7(DeviceVectorViewFloat32 delay, size_t ready_connection_count):             # <<<<<<<<<<<<<<
 *     '''
 *     Load a unit delay for all connections.
 */

/* Python wrapper */
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_17step7(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_16step7[] = "step7(DeviceVectorView delay, size_t ready_connection_count)\n\n    Load a unit delay for all connections.\n\n    Equivalent to:\n\n        connections[:ready_connection_count].delay = 1.\n    ";
static PyMethodDef __pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_17step7 = {"step7", (PyCFunction)__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_17step7, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_16step7};
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_17step7(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay = 0;
  size_t __pyx_v_ready_connection_count;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step7 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_delay,&__pyx_n_s_ready_connection_count,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_delay)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ready_connection_count)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step7", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "step7") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_delay = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[0]);
    __pyx_v_ready_connection_count = __Pyx_PyInt_As_size_t(values[1]); if (unlikely((__pyx_v_ready_connection_count == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("step7", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.step7", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_delay), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "delay", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_16step7(__pyx_self, __pyx_v_delay, __pyx_v_ready_connection_count);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_16step7(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay, size_t __pyx_v_ready_connection_count) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step7", 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":236
 *         connections[:ready_connection_count].delay = 1.
 *     '''
 *     fill_n(delay._begin, ready_connection_count, 1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  thrust::fill_n<thrust::device_vector<float> ::iterator,size_t,long>(__pyx_v_delay->_begin, __pyx_v_ready_connection_count, 1);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":228
 * 
 * 
 * def step7(DeviceVectorViewFloat32 delay, size_t ready_connection_count):             # <<<<<<<<<<<<<<
 *     '''
 *     Load a unit delay for all connections.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrust_timing/cuda/SORT_TIMING.pyx":239
 * 
 * 
 * def step8(DeviceVectorViewFloat32 delay,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewFloat32 target_longest_path,
 *           DeviceVectorViewFloat32 source_longest_path,
 */

/* Python wrapper */
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_19step8(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_18step8[] = "step8(DeviceVectorView delay, DeviceVectorView target_longest_path, DeviceVectorView source_longest_path, size_t ready_connection_count)\n\n    Add the delay of each connection to the longest path to the corresponding\n    source block.  The result is the longest path from a source end-point to\n    the target block of each connection _which includes the respective\n    connection_.\n\n    Equivalent to:\n\n        connections[:ready_connection_count].target_longest_path =             (connections[:ready_connection_count].delay +\n             connections[:ready_connection_count].source_longest_path)\n    ";
static PyMethodDef __pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_19step8 = {"step8", (PyCFunction)__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_19step8, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_18step8};
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_19step8(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_target_longest_path = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_source_longest_path = 0;
  size_t __pyx_v_ready_connection_count;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step8 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_delay,&__pyx_n_s_target_longest_path,&__pyx_n_s_source_longest_path,&__pyx_n_s_ready_connection_count,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_delay)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_target_longest_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step8", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_source_longest_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step8", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ready_connection_count)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step8", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "step8") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_delay = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[0]);
    __pyx_v_target_longest_path = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[1]);
    __pyx_v_source_longest_path = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[2]);
    __pyx_v_ready_connection_count = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_ready_connection_count == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("step8", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.step8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_delay), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "delay", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_target_longest_path), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "target_longest_path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_source_longest_path), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "source_longest_path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_18step8(__pyx_self, __pyx_v_delay, __pyx_v_target_longest_path, __pyx_v_source_longest_path, __pyx_v_ready_connection_count);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_18step8(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_target_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_source_longest_path, size_t __pyx_v_ready_connection_count) {
  thrust::plus<float>  __pyx_v_plus_f;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step8", 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":256
 *     '''
 *     cdef plus[float] plus_f
 *     transform2(delay._begin, delay._begin + ready_connection_count,             # <<<<<<<<<<<<<<
 *                source_longest_path._begin, target_longest_path._begin, plus_f)
 * 
 */
  thrust::transform<thrust::device_vector<float> ::iterator,thrust::device_vector<float> ::iterator,thrust::device_vector<float> ::iterator,thrust::plus<float> >(__pyx_v_delay->_begin, (__pyx_v_delay->_begin + __pyx_v_ready_connection_count), __pyx_v_source_longest_path->_begin, __pyx_v_target_longest_path->_begin, __pyx_v_plus_f);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":239
 * 
 * 
 * def step8(DeviceVectorViewFloat32 delay,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewFloat32 target_longest_path,
 *           DeviceVectorViewFloat32 source_longest_path,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrust_timing/cuda/SORT_TIMING.pyx":260
 * 
 * 
 * def step9(DeviceVectorViewInt32 target_key,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewFloat32 target_longest_path,
 *           DeviceVectorViewFloat32 max_target_longest_path,
 */

/* Python wrapper */
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_21step9(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_20step9[] = "step9(DeviceVectorView target_key, DeviceVectorView target_longest_path, DeviceVectorView max_target_longest_path, DeviceVectorView reduced_keys, size_t ready_connection_count)\n\n    For target blocks that have the source longest path resolved for all\n    incoming connections, compute the longest delay including the source\n    longest path plus the delay of the corresponding connection.\n\n                   source\n                   \342\224\214\342\224\200\342\224\200\342\224\200\342\224\220\n               \342\224\205  \342\224\200\342\224\202   \342\224\202\342\224\200\342\224\200\342\224\220\n                   \342\224\224\342\224\200\342\224\200\342\224\200\342\224\230\n                          \342\224\213\n            source           target\n            \342\224\214\342\224\200\342\224\200\342\224\200\342\224\220         \342\224\224\342\224\200\342\224\200\342\224\214\342\224\200\342\224\200\342\224\200\342\224\220\n        \342\224\205  \342\224\200\342\224\202   \342\224\202\342\224\200\342\224\200\342\224\200  \342\224\205  \342\224\200\342\224\200\342\224\200\342\224\200\342\224\202   \342\224\202\n            \342\224\224\342\224\200\342\224\200\342\224\200\342\224\230        \342\224\214\342\224\200\342\224\200\342\224\200\342\224\224\342\224\200\342\224\200\342\224\200\342\224\230\n             source      \342\224\202\n             \342\224\214\342\224\200\342\224\200\342\224\200\342\224\220       \342\224\202\n         \342\224\205  \342\224\200\342\224\202   \342\224\202\342\224\200\342\224\200  \342\224\205  \342\224\230\n             \342\224\224\342\224\200\342\224\200\342\224\200\342\224\230\n\n    Equivalent to:\n\n        max_target_longest_path =             (connections[:ready_connection_count].groupby('target_key')\n             .agg({'target_longest_path': np.max}))\n    ";
static PyMethodDef __pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_21step9 = {"step9", (PyCFunction)__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_21step9, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_20step9};
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_21step9(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_target_longest_path = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_max_target_longest_path = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_reduced_keys = 0;
  size_t __pyx_v_ready_connection_count;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step9 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_target_key,&__pyx_n_s_target_longest_path,&__pyx_n_s_max_target_longest_path,&__pyx_n_s_reduced_keys,&__pyx_n_s_ready_connection_count,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_target_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_target_longest_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step9", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_target_longest_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step9", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_reduced_keys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step9", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ready_connection_count)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step9", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "step9") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_target_key = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[0]);
    __pyx_v_target_longest_path = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[1]);
    __pyx_v_max_target_longest_path = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[2]);
    __pyx_v_reduced_keys = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[3]);
    __pyx_v_ready_connection_count = __Pyx_PyInt_As_size_t(values[4]); if (unlikely((__pyx_v_ready_connection_count == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("step9", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.step9", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_target_key), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "target_key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_target_longest_path), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "target_longest_path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_max_target_longest_path), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "max_target_longest_path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reduced_keys), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "reduced_keys", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_20step9(__pyx_self, __pyx_v_target_key, __pyx_v_target_longest_path, __pyx_v_max_target_longest_path, __pyx_v_reduced_keys, __pyx_v_ready_connection_count);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_20step9(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_target_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_max_target_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_reduced_keys, size_t __pyx_v_ready_connection_count) {
  thrust::maximum<float>  __pyx_v_maximum_f;
  thrust::equal_to<int32_t>  __pyx_v_equal_to;
  size_t __pyx_v_resolved_block_count;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("step9", 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":295
 *             target_key._begin, target_key._begin + ready_connection_count,
 *             target_longest_path._begin, reduced_keys._begin,
 *             max_target_longest_path._begin, equal_to, maximum_f).first -             # <<<<<<<<<<<<<<
 *         <device_vector[int32_t].iterator>reduced_keys._begin)
 *     return resolved_block_count
 */
  __pyx_v_resolved_block_count = (((thrust::device_vector<int32_t> ::iterator)thrust::reduce_by_key<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator,thrust::device_vector<float> ::iterator,thrust::equal_to<int32_t> ,thrust::maximum<float> >(__pyx_v_target_key->_begin, (__pyx_v_target_key->_begin + __pyx_v_ready_connection_count), __pyx_v_target_longest_path->_begin, __pyx_v_reduced_keys->_begin, __pyx_v_max_target_longest_path->_begin, __pyx_v_equal_to, __pyx_v_maximum_f).first) - ((thrust::device_vector<int32_t> ::iterator)__pyx_v_reduced_keys->_begin));

  /* "thrust_timing/cuda/SORT_TIMING.pyx":297
 *             max_target_longest_path._begin, equal_to, maximum_f).first -
 *         <device_vector[int32_t].iterator>reduced_keys._begin)
 *     return resolved_block_count             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_resolved_block_count); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":260
 * 
 * 
 * def step9(DeviceVectorViewInt32 target_key,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewFloat32 target_longest_path,
 *           DeviceVectorViewFloat32 max_target_longest_path,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.step9", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrust_timing/cuda/SORT_TIMING.pyx":300
 * 
 * 
 * def step10(DeviceVectorViewFloat32 longest_paths,             # <<<<<<<<<<<<<<
 *            DeviceVectorViewFloat32 max_target_longest_path,
 *            DeviceVectorViewInt32 reduced_keys, size_t resolved_block_count):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_23step10(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_22step10[] = "step10(DeviceVectorView longest_paths, DeviceVectorView max_target_longest_path, DeviceVectorView reduced_keys, size_t resolved_block_count)\n\n    Scatter the reduced target-block-key/maximum connection delays to the\n    corresponding positions in the block-indexed array containing the _longest\n    path_ targeting each block _(`longest_paths`)_.\n\n    Equivalent to:\n\n        longest_paths[max_target_longest_path.index] = max_target_longest_path.values\n    ";
static PyMethodDef __pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_23step10 = {"step10", (PyCFunction)__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_23step10, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_22step10};
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_23step10(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_longest_paths = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_max_target_longest_path = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_reduced_keys = 0;
  size_t __pyx_v_resolved_block_count;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step10 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_longest_paths,&__pyx_n_s_max_target_longest_path,&__pyx_n_s_reduced_keys,&__pyx_n_s_resolved_block_count,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_longest_paths)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_target_longest_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step10", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_reduced_keys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step10", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_resolved_block_count)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("step10", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "step10") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_longest_paths = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[0]);
    __pyx_v_max_target_longest_path = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[1]);
    __pyx_v_reduced_keys = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[2]);
    __pyx_v_resolved_block_count = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_resolved_block_count == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("step10", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.step10", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_longest_paths), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "longest_paths", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_max_target_longest_path), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "max_target_longest_path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reduced_keys), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "reduced_keys", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_22step10(__pyx_self, __pyx_v_longest_paths, __pyx_v_max_target_longest_path, __pyx_v_reduced_keys, __pyx_v_resolved_block_count);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_22step10(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_longest_paths, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_max_target_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_reduced_keys, size_t __pyx_v_resolved_block_count) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("step10", 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":312
 *         longest_paths[max_target_longest_path.index] = max_target_longest_path.values
 *     '''
 *     scatter(max_target_longest_path._begin, max_target_longest_path._begin +             # <<<<<<<<<<<<<<
 *             resolved_block_count, reduced_keys._begin, longest_paths._vector.begin())
 * 
 */
  thrust::scatter<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator,thrust::device_vector<float> ::iterator>(__pyx_v_max_target_longest_path->_begin, (__pyx_v_max_target_longest_path->_begin + __pyx_v_resolved_block_count), __pyx_v_reduced_keys->_begin, __pyx_v_longest_paths->_vector->begin());

  /* "thrust_timing/cuda/SORT_TIMING.pyx":300
 * 
 * 
 * def step10(DeviceVectorViewFloat32 longest_paths,             # <<<<<<<<<<<<<<
 *            DeviceVectorViewFloat32 max_target_longest_path,
 *            DeviceVectorViewInt32 reduced_keys, size_t resolved_block_count):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrust_timing/cuda/SORT_TIMING.pyx":316
 * 
 * 
 * def scatter_longest_paths(DeviceVectorFloat32 longest_paths,             # <<<<<<<<<<<<<<
 *                           DeviceVectorViewFloat32 max_target_longest_path,
 *                           DeviceVectorViewInt32 reduced_keys,
 */

/* Python wrapper */
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_25scatter_longest_paths(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_24scatter_longest_paths[] = "scatter_longest_paths(DeviceVector longest_paths, DeviceVectorView max_target_longest_path, DeviceVectorView reduced_keys, size_t resolved_block_count)\n\n    Scatter the reduced target-block-key/maximum connection delays to the\n    corresponding positions in the block-indexed array containing the _longest\n    path_ targeting each block _(`longest_paths`)_.\n\n    Equivalent to:\n\n        longest_paths[max_target_longest_path.index] = max_target_longest_path.values\n    ";
static PyMethodDef __pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_25scatter_longest_paths = {"scatter_longest_paths", (PyCFunction)__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_25scatter_longest_paths, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_24scatter_longest_paths};
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_25scatter_longest_paths(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVector *__pyx_v_longest_paths = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_max_target_longest_path = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_reduced_keys = 0;
  size_t __pyx_v_resolved_block_count;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scatter_longest_paths (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_longest_paths,&__pyx_n_s_max_target_longest_path,&__pyx_n_s_reduced_keys,&__pyx_n_s_resolved_block_count,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_longest_paths)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_target_longest_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scatter_longest_paths", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_reduced_keys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scatter_longest_paths", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_resolved_block_count)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("scatter_longest_paths", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "scatter_longest_paths") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_longest_paths = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVector *)values[0]);
    __pyx_v_max_target_longest_path = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[1]);
    __pyx_v_reduced_keys = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[2]);
    __pyx_v_resolved_block_count = __Pyx_PyInt_As_size_t(values[3]); if (unlikely((__pyx_v_resolved_block_count == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("scatter_longest_paths", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.scatter_longest_paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_longest_paths), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVector, 1, "longest_paths", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_max_target_longest_path), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "max_target_longest_path", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reduced_keys), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "reduced_keys", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_24scatter_longest_paths(__pyx_self, __pyx_v_longest_paths, __pyx_v_max_target_longest_path, __pyx_v_reduced_keys, __pyx_v_resolved_block_count);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_24scatter_longest_paths(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVector *__pyx_v_longest_paths, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_max_target_longest_path, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_reduced_keys, size_t __pyx_v_resolved_block_count) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("scatter_longest_paths", 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":329
 *         longest_paths[max_target_longest_path.index] = max_target_longest_path.values
 *     '''
 *     scatter(max_target_longest_path._begin, max_target_longest_path._begin +             # <<<<<<<<<<<<<<
 *             resolved_block_count, reduced_keys._begin, longest_paths._vector.begin())
 * 
 */
  thrust::scatter<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator,thrust::device_vector<float> ::iterator>(__pyx_v_max_target_longest_path->_begin, (__pyx_v_max_target_longest_path->_begin + __pyx_v_resolved_block_count), __pyx_v_reduced_keys->_begin, __pyx_v_longest_paths->_vector->begin());

  /* "thrust_timing/cuda/SORT_TIMING.pyx":316
 * 
 * 
 * def scatter_longest_paths(DeviceVectorFloat32 longest_paths,             # <<<<<<<<<<<<<<
 *                           DeviceVectorViewFloat32 max_target_longest_path,
 *                           DeviceVectorViewInt32 reduced_keys,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrust_timing/cuda/SORT_TIMING.pyx":333
 * 
 * 
 * cpdef fill_longest_paths(DeviceVectorViewInt32 external_block_keys,             # <<<<<<<<<<<<<<
 *                          DeviceVectorViewInt32 sync_logic_block_keys,
 *                          DeviceVectorViewInt32 single_connection_blocks,
 */

static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_27fill_longest_paths(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_13thrust_timing_4cuda_11SORT_TIMING_fill_longest_paths(struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_external_block_keys, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_sync_logic_block_keys, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_single_connection_blocks, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_longest_paths, CYTHON_UNUSED int __pyx_skip_dispatch) {
  size_t __pyx_v_count;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fill_longest_paths", 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":339
 *     cdef size_t count
 * 
 *     count = longest_paths._vector.size()             # <<<<<<<<<<<<<<
 * 
 *     fill_n(longest_paths._vector.begin(), count, -1)
 */
  __pyx_v_count = __pyx_v_longest_paths->_vector->size();

  /* "thrust_timing/cuda/SORT_TIMING.pyx":341
 *     count = longest_paths._vector.size()
 * 
 *     fill_n(longest_paths._vector.begin(), count, -1)             # <<<<<<<<<<<<<<
 * 
 *     count = sync_logic_block_keys._vector.size()
 */
  thrust::fill_n<thrust::device_vector<float> ::iterator,size_t,long>(__pyx_v_longest_paths->_vector->begin(), __pyx_v_count, -1);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":343
 *     fill_n(longest_paths._vector.begin(), count, -1)
 * 
 *     count = sync_logic_block_keys._vector.size()             # <<<<<<<<<<<<<<
 * 
 *     fill_n(make_permutation_iterator(longest_paths._vector.begin(),
 */
  __pyx_v_count = __pyx_v_sync_logic_block_keys->_vector->size();

  /* "thrust_timing/cuda/SORT_TIMING.pyx":345
 *     count = sync_logic_block_keys._vector.size()
 * 
 *     fill_n(make_permutation_iterator(longest_paths._vector.begin(),             # <<<<<<<<<<<<<<
 *                                      sync_logic_block_keys._vector.begin()),
 *            count, 0)
 */
  thrust::fill_n<thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> ,size_t,long>(thrust::make_permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_longest_paths->_vector->begin(), __pyx_v_sync_logic_block_keys->_vector->begin()), __pyx_v_count, 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":349
 *            count, 0)
 * 
 *     count = external_block_keys._vector.size()             # <<<<<<<<<<<<<<
 * 
 *     fill_n(make_permutation_iterator(longest_paths._vector.begin(),
 */
  __pyx_v_count = __pyx_v_external_block_keys->_vector->size();

  /* "thrust_timing/cuda/SORT_TIMING.pyx":351
 *     count = external_block_keys._vector.size()
 * 
 *     fill_n(make_permutation_iterator(longest_paths._vector.begin(),             # <<<<<<<<<<<<<<
 *                                      external_block_keys._vector.begin()),
 *            count, 0)
 */
  thrust::fill_n<thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> ,size_t,long>(thrust::make_permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_longest_paths->_vector->begin(), __pyx_v_external_block_keys->_vector->begin()), __pyx_v_count, 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":355
 *            count, 0)
 * 
 *     count = single_connection_blocks._vector.size()             # <<<<<<<<<<<<<<
 * 
 *     fill_n(make_permutation_iterator(longest_paths._vector.begin(),
 */
  __pyx_v_count = __pyx_v_single_connection_blocks->_vector->size();

  /* "thrust_timing/cuda/SORT_TIMING.pyx":357
 *     count = single_connection_blocks._vector.size()
 * 
 *     fill_n(make_permutation_iterator(longest_paths._vector.begin(),             # <<<<<<<<<<<<<<
 *                                      single_connection_blocks._vector.begin()),
 *            count, 0)
 */
  thrust::fill_n<thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> ,size_t,long>(thrust::make_permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_longest_paths->_vector->begin(), __pyx_v_single_connection_blocks->_vector->begin()), __pyx_v_count, 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":333
 * 
 * 
 * cpdef fill_longest_paths(DeviceVectorViewInt32 external_block_keys,             # <<<<<<<<<<<<<<
 *                          DeviceVectorViewInt32 sync_logic_block_keys,
 *                          DeviceVectorViewInt32 single_connection_blocks,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_27fill_longest_paths(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_26fill_longest_paths[] = "fill_longest_paths(DeviceVectorView external_block_keys, DeviceVectorView sync_logic_block_keys, DeviceVectorView single_connection_blocks, DeviceVectorView longest_paths)";
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_27fill_longest_paths(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_external_block_keys = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_sync_logic_block_keys = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_single_connection_blocks = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_longest_paths = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fill_longest_paths (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_external_block_keys,&__pyx_n_s_sync_logic_block_keys,&__pyx_n_s_single_connection_blocks,&__pyx_n_s_longest_paths,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_external_block_keys)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sync_logic_block_keys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fill_longest_paths", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_single_connection_blocks)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fill_longest_paths", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_longest_paths)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fill_longest_paths", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_longest_paths") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_external_block_keys = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[0]);
    __pyx_v_sync_logic_block_keys = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[1]);
    __pyx_v_single_connection_blocks = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[2]);
    __pyx_v_longest_paths = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_longest_paths", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.fill_longest_paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_external_block_keys), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "external_block_keys", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sync_logic_block_keys), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "sync_logic_block_keys", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_single_connection_blocks), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "single_connection_blocks", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_longest_paths), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "longest_paths", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_26fill_longest_paths(__pyx_self, __pyx_v_external_block_keys, __pyx_v_sync_logic_block_keys, __pyx_v_single_connection_blocks, __pyx_v_longest_paths);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_26fill_longest_paths(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_external_block_keys, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_sync_logic_block_keys, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_single_connection_blocks, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_longest_paths) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fill_longest_paths", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_13thrust_timing_4cuda_11SORT_TIMING_fill_longest_paths(__pyx_v_external_block_keys, __pyx_v_sync_logic_block_keys, __pyx_v_single_connection_blocks, __pyx_v_longest_paths, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.fill_longest_paths", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrust_timing/cuda/SORT_TIMING.pyx":362
 * 
 * 
 * cpdef look_up_delay(DeviceVectorViewInt32 source_key,             # <<<<<<<<<<<<<<
 *                     DeviceVectorViewInt32 target_key,
 *                     DeviceVectorViewUint8 delay_type,
 */

static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_29look_up_delay(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_13thrust_timing_4cuda_11SORT_TIMING_look_up_delay(struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_source_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_delay_type, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_x, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_y, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arch_delays, int32_t __pyx_v_nrows, int32_t __pyx_v_ncols, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay, CYTHON_UNUSED int __pyx_skip_dispatch) {
  size_t __pyx_v_count;
  cythrust::absolute<int32_t>  __pyx_v_abs_func;
  thrust::minus<int32_t>  __pyx_v_minus_func;
  unpack_binary_args<thrust::minus<int32_t> >  *__pyx_v_unpacked_minus;
  delay<thrust::device_vector<float> ::iterator>  *__pyx_v_delay_f;
  unpack_ternary_args<delay<thrust::device_vector<float> ::iterator> >  *__pyx_v_unpacked_delay;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("look_up_delay", 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":387
 *                              np.abs(p_y[source_key] - p_y[target_key]))
 *     '''
 *     cdef size_t count = source_key.size             # <<<<<<<<<<<<<<
 *     cdef absolute[int32_t] abs_func
 *     cdef minus[int32_t] minus_func
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_source_key), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_count = __pyx_t_2;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":391
 *     cdef minus[int32_t] minus_func
 *     cdef unpack_binary_args[minus[int32_t]] *unpacked_minus = \
 *         new unpack_binary_args[minus[int32_t]](minus_func)             # <<<<<<<<<<<<<<
 *     cdef timing_delay[device_vector[float].iterator] *delay_f = \
 *         new timing_delay[device_vector[float].iterator](arch_delays._begin,
 */
  __pyx_v_unpacked_minus = new unpack_binary_args<thrust::minus<int32_t> > (__pyx_v_minus_func);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":393
 *         new unpack_binary_args[minus[int32_t]](minus_func)
 *     cdef timing_delay[device_vector[float].iterator] *delay_f = \
 *         new timing_delay[device_vector[float].iterator](arch_delays._begin,             # <<<<<<<<<<<<<<
 *                                                         nrows, ncols)
 *     cdef unpack_ternary_args[timing_delay[device_vector[float].iterator]] \
 */
  __pyx_v_delay_f = new delay<thrust::device_vector<float> ::iterator> (__pyx_v_arch_delays->_begin, __pyx_v_nrows, __pyx_v_ncols);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":398
 *         *unpacked_delay = new \
 *         unpack_ternary_args[timing_delay[device_vector[float].iterator]]\
 *         (deref(delay_f))             # <<<<<<<<<<<<<<
 * 
 *     copy_n(
 */
  __pyx_v_unpacked_delay = new unpack_ternary_args<delay<thrust::device_vector<float> ::iterator> > ((*__pyx_v_delay_f));

  /* "thrust_timing/cuda/SORT_TIMING.pyx":400
 *         (deref(delay_f))
 * 
 *     copy_n(             # <<<<<<<<<<<<<<
 *         make_transform_iterator(
 *             make_zip_iterator(
 */
  thrust::copy_n<thrust::transform_iterator<unpack_ternary_args<delay<thrust::device_vector<float> ::iterator> > ,thrust::zip_iterator<thrust::tuple<thrust::device_vector<uint8_t> ::iterator,thrust::transform_iterator<cythrust::absolute<int32_t> ,thrust::transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > > ,thrust::transform_iterator<cythrust::absolute<int32_t> ,thrust::transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > > > > > ,size_t,thrust::device_vector<float> ::iterator>(thrust::make_transform_iterator<unpack_ternary_args<delay<thrust::device_vector<float> ::iterator> > ,thrust::zip_iterator<thrust::tuple<thrust::device_vector<uint8_t> ::iterator,thrust::transform_iterator<cythrust::absolute<int32_t> ,thrust::transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > > ,thrust::transform_iterator<cythrust::absolute<int32_t> ,thrust::transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > > > > >(thrust::make_zip_iterator<thrust::tuple<thrust::device_vector<uint8_t> ::iterator,thrust::transform_iterator<cythrust::absolute<int32_t> ,thrust::transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > > ,thrust::transform_iterator<cythrust::absolute<int32_t> ,thrust::transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > > > >(thrust::make_tuple<thrust::device_vector<uint8_t> ::iterator,thrust::transform_iterator<cythrust::absolute<int32_t> ,thrust::transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > > ,thrust::transform_iterator<cythrust::absolute<int32_t> ,thrust::transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > > >(__pyx_v_delay_type->_begin, thrust::make_transform_iterator<cythrust::absolute<int32_t> ,thrust::transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > >(thrust::make_transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > >(thrust::make_zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > >(thrust::make_tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> >(thrust::make_permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_p_x->_begin, __pyx_v_source_key->_begin), thrust::make_permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_p_x->_begin, __pyx_v_target_key->_begin))), (*__pyx_v_unpacked_minus)), __pyx_v_abs_func), thrust::make_transform_iterator<cythrust::absolute<int32_t> ,thrust::transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > >(thrust::make_transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > >(thrust::make_zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > >(thrust::make_tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> >(thrust::make_permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_p_y->_begin, __pyx_v_source_key->_begin), thrust::make_permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_p_y->_begin, __pyx_v_target_key->_begin))), (*__pyx_v_unpacked_minus)), __pyx_v_abs_func))), (*__pyx_v_unpacked_delay)), __pyx_v_count, __pyx_v_delay->_begin);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":428
 *                             deref(unpacked_minus)), abs_func))),
 *             deref(unpacked_delay)), count, delay._begin)
 *     del unpacked_minus             # <<<<<<<<<<<<<<
 *     del delay_f
 *     del unpacked_delay
 */
  delete __pyx_v_unpacked_minus;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":429
 *             deref(unpacked_delay)), count, delay._begin)
 *     del unpacked_minus
 *     del delay_f             # <<<<<<<<<<<<<<
 *     del unpacked_delay
 * 
 */
  delete __pyx_v_delay_f;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":430
 *     del unpacked_minus
 *     del delay_f
 *     del unpacked_delay             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete __pyx_v_unpacked_delay;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":362
 * 
 * 
 * cpdef look_up_delay(DeviceVectorViewInt32 source_key,             # <<<<<<<<<<<<<<
 *                     DeviceVectorViewInt32 target_key,
 *                     DeviceVectorViewUint8 delay_type,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.look_up_delay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_29look_up_delay(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_28look_up_delay[] = "look_up_delay(DeviceVectorView source_key, DeviceVectorView target_key, DeviceVectorView delay_type, DeviceVectorView p_x, DeviceVectorView p_y, DeviceVectorView arch_delays, int32_t nrows, int32_t ncols, DeviceVectorView delay)\n\n    Compute delay for each connection, based on a delays look-up table\n    _(`arch_delays`)_.\n\n        source\n        \342\224\214\342\224\200\342\224\200\342\224\200\342\224\220\n        \342\224\202   \342\224\202\342\224\200\342\224\200\342\224\220       target\n        \342\224\224\342\224\200\342\224\200\342\224\200\342\224\230  \342\224\202       \342\224\214\342\224\200\342\224\200\342\224\200\342\224\220\n               \342\224\224\342\224\200  \342\224\205  \342\224\200\342\224\202   \342\224\202\n                       \342\224\224\342\224\200\342\224\200\342\224\200\342\224\230\n               delay?\n\n\n    Equivalent to:\n\n        delay = timing_delay(np.abs(p_x[source_key] - p_x[target_key]),\n                             np.abs(p_y[source_key] - p_y[target_key]))\n    ";
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_29look_up_delay(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_source_key = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_delay_type = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_x = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_y = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arch_delays = 0;
  int32_t __pyx_v_nrows;
  int32_t __pyx_v_ncols;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("look_up_delay (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_key,&__pyx_n_s_target_key,&__pyx_n_s_delay_type,&__pyx_n_s_p_x,&__pyx_n_s_p_y,&__pyx_n_s_arch_delays,&__pyx_n_s_nrows,&__pyx_n_s_ncols,&__pyx_n_s_delay,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_source_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_target_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("look_up_delay", 1, 9, 9, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_delay_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("look_up_delay", 1, 9, 9, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("look_up_delay", 1, 9, 9, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("look_up_delay", 1, 9, 9, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arch_delays)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("look_up_delay", 1, 9, 9, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nrows)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("look_up_delay", 1, 9, 9, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ncols)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("look_up_delay", 1, 9, 9, 7); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_delay)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("look_up_delay", 1, 9, 9, 8); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "look_up_delay") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_source_key = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[0]);
    __pyx_v_target_key = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[1]);
    __pyx_v_delay_type = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *)values[2]);
    __pyx_v_p_x = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[3]);
    __pyx_v_p_y = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[4]);
    __pyx_v_arch_delays = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[5]);
    __pyx_v_nrows = __Pyx_PyInt_As_int32_t(values[6]); if (unlikely((__pyx_v_nrows == (int32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_ncols = __Pyx_PyInt_As_int32_t(values[7]); if (unlikely((__pyx_v_ncols == (int32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_delay = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[8]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("look_up_delay", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.look_up_delay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_source_key), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "source_key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_target_key), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "target_key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_delay_type), __pyx_ptype_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView, 1, "delay_type", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_x), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "p_x", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_y), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "p_y", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arch_delays), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "arch_delays", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_delay), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "delay", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_28look_up_delay(__pyx_self, __pyx_v_source_key, __pyx_v_target_key, __pyx_v_delay_type, __pyx_v_p_x, __pyx_v_p_y, __pyx_v_arch_delays, __pyx_v_nrows, __pyx_v_ncols, __pyx_v_delay);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_28look_up_delay(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_source_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_delay_type, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_x, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_y, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arch_delays, int32_t __pyx_v_nrows, int32_t __pyx_v_ncols, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("look_up_delay", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_13thrust_timing_4cuda_11SORT_TIMING_look_up_delay(__pyx_v_source_key, __pyx_v_target_key, __pyx_v_delay_type, __pyx_v_p_x, __pyx_v_p_y, __pyx_v_arch_delays, __pyx_v_nrows, __pyx_v_ncols, __pyx_v_delay, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.look_up_delay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrust_timing/cuda/SORT_TIMING.pyx":433
 * 
 * 
 * cpdef look_up_delay_prime(DeviceVectorViewInt32 source_key,             # <<<<<<<<<<<<<<
 *                     DeviceVectorViewInt32 target_key,
 *                     DeviceVectorViewUint8 delay_type,
 */

static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_31look_up_delay_prime(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_13thrust_timing_4cuda_11SORT_TIMING_look_up_delay_prime(struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_source_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_delay_type, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_x, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_y, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_x_prime, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_y_prime, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arch_delays, int32_t __pyx_v_nrows, int32_t __pyx_v_ncols, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay, CYTHON_UNUSED int __pyx_skip_dispatch) {
  size_t __pyx_v_count;
  cythrust::absolute<int32_t>  __pyx_v_abs_func;
  thrust::minus<int32_t>  __pyx_v_minus_func;
  unpack_binary_args<thrust::minus<int32_t> >  *__pyx_v_unpacked_minus;
  delay<thrust::device_vector<float> ::iterator>  *__pyx_v_delay_f;
  unpack_ternary_args<delay<thrust::device_vector<float> ::iterator> >  *__pyx_v_unpacked_delay;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("look_up_delay_prime", 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":464
 *                              np.abs(p_y[source_key] - p_y_prime[target_key]))
 *     '''
 *     cdef size_t count = source_key.size             # <<<<<<<<<<<<<<
 *     cdef absolute[int32_t] abs_func
 *     cdef minus[int32_t] minus_func
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_source_key), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_count = __pyx_t_2;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":468
 *     cdef minus[int32_t] minus_func
 *     cdef unpack_binary_args[minus[int32_t]] *unpacked_minus = \
 *         new unpack_binary_args[minus[int32_t]](minus_func)             # <<<<<<<<<<<<<<
 *     cdef timing_delay[device_vector[float].iterator] *delay_f = \
 *         new timing_delay[device_vector[float].iterator](arch_delays._begin,
 */
  __pyx_v_unpacked_minus = new unpack_binary_args<thrust::minus<int32_t> > (__pyx_v_minus_func);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":470
 *         new unpack_binary_args[minus[int32_t]](minus_func)
 *     cdef timing_delay[device_vector[float].iterator] *delay_f = \
 *         new timing_delay[device_vector[float].iterator](arch_delays._begin,             # <<<<<<<<<<<<<<
 *                                                         nrows, ncols)
 *     cdef unpack_ternary_args[timing_delay[device_vector[float].iterator]] \
 */
  __pyx_v_delay_f = new delay<thrust::device_vector<float> ::iterator> (__pyx_v_arch_delays->_begin, __pyx_v_nrows, __pyx_v_ncols);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":475
 *         *unpacked_delay = new \
 *         unpack_ternary_args[timing_delay[device_vector[float].iterator]]\
 *         (deref(delay_f))             # <<<<<<<<<<<<<<
 * 
 *     copy_n(
 */
  __pyx_v_unpacked_delay = new unpack_ternary_args<delay<thrust::device_vector<float> ::iterator> > ((*__pyx_v_delay_f));

  /* "thrust_timing/cuda/SORT_TIMING.pyx":477
 *         (deref(delay_f))
 * 
 *     copy_n(             # <<<<<<<<<<<<<<
 *         make_transform_iterator(
 *             make_zip_iterator(
 */
  thrust::copy_n<thrust::transform_iterator<unpack_ternary_args<delay<thrust::device_vector<float> ::iterator> > ,thrust::zip_iterator<thrust::tuple<thrust::device_vector<uint8_t> ::iterator,thrust::transform_iterator<cythrust::absolute<int32_t> ,thrust::transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > > ,thrust::transform_iterator<cythrust::absolute<int32_t> ,thrust::transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > > > > > ,size_t,thrust::device_vector<float> ::iterator>(thrust::make_transform_iterator<unpack_ternary_args<delay<thrust::device_vector<float> ::iterator> > ,thrust::zip_iterator<thrust::tuple<thrust::device_vector<uint8_t> ::iterator,thrust::transform_iterator<cythrust::absolute<int32_t> ,thrust::transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > > ,thrust::transform_iterator<cythrust::absolute<int32_t> ,thrust::transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > > > > >(thrust::make_zip_iterator<thrust::tuple<thrust::device_vector<uint8_t> ::iterator,thrust::transform_iterator<cythrust::absolute<int32_t> ,thrust::transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > > ,thrust::transform_iterator<cythrust::absolute<int32_t> ,thrust::transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > > > >(thrust::make_tuple<thrust::device_vector<uint8_t> ::iterator,thrust::transform_iterator<cythrust::absolute<int32_t> ,thrust::transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > > ,thrust::transform_iterator<cythrust::absolute<int32_t> ,thrust::transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > > >(__pyx_v_delay_type->_begin, thrust::make_transform_iterator<cythrust::absolute<int32_t> ,thrust::transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > >(thrust::make_transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > >(thrust::make_zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > >(thrust::make_tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> >(thrust::make_permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_p_x->_begin, __pyx_v_source_key->_begin), thrust::make_permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_p_x_prime->_begin, __pyx_v_target_key->_begin))), (*__pyx_v_unpacked_minus)), __pyx_v_abs_func), thrust::make_transform_iterator<cythrust::absolute<int32_t> ,thrust::transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > >(thrust::make_transform_iterator<unpack_binary_args<thrust::minus<int32_t> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > > >(thrust::make_zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> > >(thrust::make_tuple<thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator> >(thrust::make_permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_p_y->_begin, __pyx_v_source_key->_begin), thrust::make_permutation_iterator<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_p_y_prime->_begin, __pyx_v_target_key->_begin))), (*__pyx_v_unpacked_minus)), __pyx_v_abs_func))), (*__pyx_v_unpacked_delay)), __pyx_v_count, __pyx_v_delay->_begin);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":505
 *                             deref(unpacked_minus)), abs_func))),
 *             deref(unpacked_delay)), count, delay._begin)
 *     del unpacked_minus             # <<<<<<<<<<<<<<
 *     del delay_f
 *     del unpacked_delay
 */
  delete __pyx_v_unpacked_minus;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":506
 *             deref(unpacked_delay)), count, delay._begin)
 *     del unpacked_minus
 *     del delay_f             # <<<<<<<<<<<<<<
 *     del unpacked_delay
 * 
 */
  delete __pyx_v_delay_f;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":507
 *     del unpacked_minus
 *     del delay_f
 *     del unpacked_delay             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete __pyx_v_unpacked_delay;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":433
 * 
 * 
 * cpdef look_up_delay_prime(DeviceVectorViewInt32 source_key,             # <<<<<<<<<<<<<<
 *                     DeviceVectorViewInt32 target_key,
 *                     DeviceVectorViewUint8 delay_type,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.look_up_delay_prime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_31look_up_delay_prime(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_30look_up_delay_prime[] = "look_up_delay_prime(DeviceVectorView source_key, DeviceVectorView target_key, DeviceVectorView delay_type, DeviceVectorView p_x, DeviceVectorView p_y, DeviceVectorView p_x_prime, DeviceVectorView p_y_prime, DeviceVectorView arch_delays, int32_t nrows, int32_t ncols, DeviceVectorView delay)\n\n    Compute delay for each connection, based on a delays look-up table\n    _(`arch_delays`)_, but using the proposed new position for each _target\n    block_.  Note that the source block of each connection is assumed to hold\n    the current position.\n\n                                 target\n        source                 (p_x, p_y)\n      (p_x, p_y)       target    \342\224\214\342\224\204\342\224\204\342\224\204\342\224\220\n        \342\224\214\342\224\200\342\224\200\342\224\200\342\224\220       (p_x_prime,  \342\224\212   \342\224\212\n        \342\224\202   \342\224\202\342\224\200\342\224\200\342\224\220     p_y_prime)\342\225\261 \342\224\224\342\224\204\342\224\204\342\224\204\342\224\230\n        \342\224\224\342\224\200\342\224\200\342\224\200\342\224\230  \342\224\202       \342\224\214\342\224\200\342\224\200\342\224\200\342\224\220  \342\225\261\n               \342\224\224\342\224\200  \342\224\205  \342\224\200\342\224\202   \342\224\202\n                       \342\224\224\342\224\200\342\224\200\342\224\200\342\224\230\n               delay?\n\n\n\n    Equivalent to:\n\n        delay = timing_delay(np.abs(p_x[source_key] - p_x_prime[target_key]),\n                             np.abs(p_y[source_key] - p_y_prime[target_key]))\n    ";
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_31look_up_delay_prime(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_source_key = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_delay_type = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_x = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_y = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_x_prime = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_y_prime = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arch_delays = 0;
  int32_t __pyx_v_nrows;
  int32_t __pyx_v_ncols;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("look_up_delay_prime (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_key,&__pyx_n_s_target_key,&__pyx_n_s_delay_type,&__pyx_n_s_p_x,&__pyx_n_s_p_y,&__pyx_n_s_p_x_prime,&__pyx_n_s_p_y_prime,&__pyx_n_s_arch_delays,&__pyx_n_s_nrows,&__pyx_n_s_ncols,&__pyx_n_s_delay,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_source_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_target_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("look_up_delay_prime", 1, 11, 11, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_delay_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("look_up_delay_prime", 1, 11, 11, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("look_up_delay_prime", 1, 11, 11, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("look_up_delay_prime", 1, 11, 11, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_x_prime)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("look_up_delay_prime", 1, 11, 11, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_y_prime)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("look_up_delay_prime", 1, 11, 11, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arch_delays)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("look_up_delay_prime", 1, 11, 11, 7); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nrows)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("look_up_delay_prime", 1, 11, 11, 8); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_ncols)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("look_up_delay_prime", 1, 11, 11, 9); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_delay)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("look_up_delay_prime", 1, 11, 11, 10); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "look_up_delay_prime") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 11) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
    }
    __pyx_v_source_key = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[0]);
    __pyx_v_target_key = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[1]);
    __pyx_v_delay_type = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *)values[2]);
    __pyx_v_p_x = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[3]);
    __pyx_v_p_y = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[4]);
    __pyx_v_p_x_prime = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[5]);
    __pyx_v_p_y_prime = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[6]);
    __pyx_v_arch_delays = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[7]);
    __pyx_v_nrows = __Pyx_PyInt_As_int32_t(values[8]); if (unlikely((__pyx_v_nrows == (int32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_ncols = __Pyx_PyInt_As_int32_t(values[9]); if (unlikely((__pyx_v_ncols == (int32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_delay = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[10]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("look_up_delay_prime", 1, 11, 11, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.look_up_delay_prime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_source_key), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "source_key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_target_key), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "target_key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_delay_type), __pyx_ptype_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView, 1, "delay_type", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_x), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "p_x", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_y), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "p_y", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_x_prime), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "p_x_prime", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_y_prime), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "p_y_prime", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arch_delays), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "arch_delays", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_delay), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "delay", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_30look_up_delay_prime(__pyx_self, __pyx_v_source_key, __pyx_v_target_key, __pyx_v_delay_type, __pyx_v_p_x, __pyx_v_p_y, __pyx_v_p_x_prime, __pyx_v_p_y_prime, __pyx_v_arch_delays, __pyx_v_nrows, __pyx_v_ncols, __pyx_v_delay);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_30look_up_delay_prime(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_source_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_target_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView *__pyx_v_delay_type, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_x, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_y, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_x_prime, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_p_y_prime, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arch_delays, int32_t __pyx_v_nrows, int32_t __pyx_v_ncols, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("look_up_delay_prime", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_13thrust_timing_4cuda_11SORT_TIMING_look_up_delay_prime(__pyx_v_source_key, __pyx_v_target_key, __pyx_v_delay_type, __pyx_v_p_x, __pyx_v_p_y, __pyx_v_p_x_prime, __pyx_v_p_y_prime, __pyx_v_arch_delays, __pyx_v_nrows, __pyx_v_ncols, __pyx_v_delay, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.look_up_delay_prime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrust_timing/cuda/SORT_TIMING.pyx":510
 * 
 * 
 * def connection_criticality(DeviceVectorViewFloat32 delay,             # <<<<<<<<<<<<<<
 *                            DeviceVectorViewFloat32 arrival_times,
 *                            DeviceVectorViewFloat32 departure_times,
 */

/* Python wrapper */
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_33connection_criticality(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_32connection_criticality[] = "connection_criticality(DeviceVectorView delay, DeviceVectorView arrival_times, DeviceVectorView departure_times, DeviceVectorView driver_key, DeviceVectorView sink_key, DeviceVectorView criticality)\n\n    Compute the criticality of each connection based on:\n\n     - The longest path of the source block.\n     - The longest path of the target block.\n     - The delay of the connection.\n\n           Driver         Source             Target           Sink\n           \342\225\224\342\225\220\342\225\220\342\225\220\342\225\227          \342\224\214\342\224\200\342\224\200\342\224\200\342\224\220              \342\224\214\342\224\200\342\224\200\342\224\200\342\224\220           \342\225\224\342\225\220\342\225\220\342\225\220\342\225\227\n           \342\225\221   \342\225\221\342\224\200\342\224\200\342\224\200  \342\224\205  \342\224\200\342\224\200\342\224\202   \342\224\202\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\200\342\224\202   \342\224\202\342\224\200\342\224\200\342\224\200  \342\224\205  \342\224\200\342\224\200\342\224\200\342\225\221   \342\225\221\n           \342\225\232\342\225\220\342\225\220\342\225\220\342\225\235          \342\224\224\342\224\200\342\224\200\342\224\200\342\224\230              \342\224\224\342\224\200\342\224\200\342\224\200\342\224\230           \342\225\232\342\225\220\342\225\220\342\225\220\342\225\235\n                 Longest         Connection         Longest\n                path from          delay           path from\n                driver to                          target to\n                 source                              sink\n\n    Equivalent to:\n\n        a.v['criticality'][:] = ((self._arrival_times[a['source_key'].values] +\n                                    a['delay'] +\n                                    self._departure_times[a['target_key'].values])\n                           ""         / self.critical_path)\n    ";
static PyMethodDef __pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_33connection_criticality = {"connection_criticality", (PyCFunction)__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_33connection_criticality, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_32connection_criticality};
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_33connection_criticality(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arrival_times = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_departure_times = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_driver_key = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_sink_key = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_criticality = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("connection_criticality (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_delay,&__pyx_n_s_arrival_times,&__pyx_n_s_departure_times,&__pyx_n_s_driver_key,&__pyx_n_s_sink_key,&__pyx_n_s_criticality,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_delay)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arrival_times)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("connection_criticality", 1, 6, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_departure_times)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("connection_criticality", 1, 6, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_driver_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("connection_criticality", 1, 6, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sink_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("connection_criticality", 1, 6, 6, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_criticality)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("connection_criticality", 1, 6, 6, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "connection_criticality") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_delay = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[0]);
    __pyx_v_arrival_times = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[1]);
    __pyx_v_departure_times = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[2]);
    __pyx_v_driver_key = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[3]);
    __pyx_v_sink_key = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[4]);
    __pyx_v_criticality = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[5]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("connection_criticality", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.connection_criticality", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_delay), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "delay", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arrival_times), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "arrival_times", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_departure_times), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "departure_times", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_driver_key), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "driver_key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sink_key), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "sink_key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_criticality), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "criticality", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_32connection_criticality(__pyx_self, __pyx_v_delay, __pyx_v_arrival_times, __pyx_v_departure_times, __pyx_v_driver_key, __pyx_v_sink_key, __pyx_v_criticality);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_32connection_criticality(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arrival_times, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_departure_times, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_driver_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_sink_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_criticality) {
  float __pyx_v_critical_path;
  connection_criticality<float>  *__pyx_v_connection_criticality_f;
  unpack_ternary_args<connection_criticality<float> >  *__pyx_v_unpacked_connection_criticality;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("connection_criticality", 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":541
 *     cdef maximum[float] maximum_f
 * 
 *     cdef float critical_path = deref(max_element(arrival_times._begin,             # <<<<<<<<<<<<<<
 *                                                  arrival_times._end))
 * 
 */
  __pyx_v_critical_path = (*thrust::max_element<thrust::device_vector<float> ::iterator>(__pyx_v_arrival_times->_begin, __pyx_v_arrival_times->_end));

  /* "thrust_timing/cuda/SORT_TIMING.pyx":545
 * 
 *     cdef c_connection_criticality[float] *connection_criticality_f = \
 *         new c_connection_criticality[float](critical_path)             # <<<<<<<<<<<<<<
 *     cdef unpack_ternary_args[c_connection_criticality[float]] \
 *         *unpacked_connection_criticality = \
 */
  __pyx_v_connection_criticality_f = new connection_criticality<float> (__pyx_v_critical_path);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":549
 *         *unpacked_connection_criticality = \
 *         new unpack_ternary_args[c_connection_criticality[float]] \
 *         (deref(connection_criticality_f))             # <<<<<<<<<<<<<<
 * 
 *     copy_n(
 */
  __pyx_v_unpacked_connection_criticality = new unpack_ternary_args<connection_criticality<float> > ((*__pyx_v_connection_criticality_f));

  /* "thrust_timing/cuda/SORT_TIMING.pyx":551
 *         (deref(connection_criticality_f))
 * 
 *     copy_n(             # <<<<<<<<<<<<<<
 *         make_transform_iterator(
 *             make_zip_iterator(
 */
  thrust::copy_n<thrust::transform_iterator<unpack_ternary_args<connection_criticality<float> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::device_vector<float> ::iterator,thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > ,size_t,thrust::device_vector<float> ::iterator>(thrust::make_transform_iterator<unpack_ternary_args<connection_criticality<float> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::device_vector<float> ::iterator,thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> > > >(thrust::make_zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::device_vector<float> ::iterator,thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> > >(thrust::make_tuple<thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::device_vector<float> ::iterator,thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> >(thrust::make_permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_arrival_times->_begin, __pyx_v_driver_key->_begin), __pyx_v_delay->_begin, thrust::make_permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_departure_times->_begin, __pyx_v_sink_key->_begin))), (*__pyx_v_unpacked_connection_criticality)), __pyx_v_delay->_vector->size(), __pyx_v_criticality->_begin);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":563
 *         criticality._begin)
 * 
 *     return critical_path             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_critical_path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":510
 * 
 * 
 * def connection_criticality(DeviceVectorViewFloat32 delay,             # <<<<<<<<<<<<<<
 *                            DeviceVectorViewFloat32 arrival_times,
 *                            DeviceVectorViewFloat32 departure_times,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.connection_criticality", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrust_timing/cuda/SORT_TIMING.pyx":566
 * 
 * 
 * def connection_cost(float criticality_exp,             # <<<<<<<<<<<<<<
 *                     DeviceVectorViewFloat32 delay,
 *                     DeviceVectorViewFloat32 arrival_times,
 */

/* Python wrapper */
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_35connection_cost(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_34connection_cost[] = "connection_cost(float criticality_exp, DeviceVectorView delay, DeviceVectorView arrival_times, DeviceVectorView departure_times, DeviceVectorView driver_key, DeviceVectorView sink_key, DeviceVectorView cost, float critical_path=-1)\n\n    Compute the cost of each connection.  The result is equivalent to the\n    following:\n\n        criticality = ((arrival_times[target_key] + delay +\n                        departure_times[source_key]) / critical_path)\n        cost = ((criticality ** criticality_exp) * delay)\n\n    where:\n\n     - `arrival_times`, `delay`, and `departure_times` are arrays, with one\n       entry per connection.\n     - `criticality_exp` is the maximum delay of any path in the circuit.  This\n       should be equivalent to the maximum arrival _(or departure)_ time.\n     - `criticality_exp` is a normalizing exponent term.  The higher the\n       exponent, the lower the resulting calculation, since the value under the\n       exponent is always less than or equal to one.\n    ";
static PyMethodDef __pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_35connection_cost = {"connection_cost", (PyCFunction)__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_35connection_cost, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_34connection_cost};
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_35connection_cost(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_criticality_exp;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arrival_times = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_departure_times = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_driver_key = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_sink_key = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_cost = 0;
  float __pyx_v_critical_path;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("connection_cost (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_criticality_exp,&__pyx_n_s_delay,&__pyx_n_s_arrival_times,&__pyx_n_s_departure_times,&__pyx_n_s_driver_key,&__pyx_n_s_sink_key,&__pyx_n_s_cost,&__pyx_n_s_critical_path,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_criticality_exp)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_delay)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("connection_cost", 0, 7, 8, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arrival_times)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("connection_cost", 0, 7, 8, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_departure_times)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("connection_cost", 0, 7, 8, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_driver_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("connection_cost", 0, 7, 8, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sink_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("connection_cost", 0, 7, 8, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cost)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("connection_cost", 0, 7, 8, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_critical_path);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "connection_cost") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_criticality_exp = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_criticality_exp == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_delay = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[1]);
    __pyx_v_arrival_times = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[2]);
    __pyx_v_departure_times = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[3]);
    __pyx_v_driver_key = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[4]);
    __pyx_v_sink_key = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[5]);
    __pyx_v_cost = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[6]);
    if (values[7]) {
      __pyx_v_critical_path = __pyx_PyFloat_AsFloat(values[7]); if (unlikely((__pyx_v_critical_path == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_critical_path = ((float)-1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("connection_cost", 0, 7, 8, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.connection_cost", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_delay), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "delay", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arrival_times), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "arrival_times", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_departure_times), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "departure_times", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_driver_key), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "driver_key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sink_key), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "sink_key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cost), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "cost", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_34connection_cost(__pyx_self, __pyx_v_criticality_exp, __pyx_v_delay, __pyx_v_arrival_times, __pyx_v_departure_times, __pyx_v_driver_key, __pyx_v_sink_key, __pyx_v_cost, __pyx_v_critical_path);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_34connection_cost(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_criticality_exp, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_delay, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arrival_times, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_departure_times, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_driver_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_sink_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_cost, float __pyx_v_critical_path) {
  connection_cost<float>  *__pyx_v_connection_cost_f;
  unpack_ternary_args<connection_cost<float> >  *__pyx_v_unpacked_connection_cost;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("connection_cost", 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":594
 *     cdef maximum[float] maximum_f
 * 
 *     if critical_path < 0:             # <<<<<<<<<<<<<<
 *         critical_path = deref(max_element(arrival_times._begin,
 *                                           arrival_times._end))
 */
  __pyx_t_1 = ((__pyx_v_critical_path < 0.0) != 0);
  if (__pyx_t_1) {

    /* "thrust_timing/cuda/SORT_TIMING.pyx":595
 * 
 *     if critical_path < 0:
 *         critical_path = deref(max_element(arrival_times._begin,             # <<<<<<<<<<<<<<
 *                                           arrival_times._end))
 * 
 */
    __pyx_v_critical_path = (*thrust::max_element<thrust::device_vector<float> ::iterator>(__pyx_v_arrival_times->_begin, __pyx_v_arrival_times->_end));
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":599
 * 
 *     cdef c_connection_cost[float] *connection_cost_f = \
 *         new c_connection_cost[float](critical_path, criticality_exp)             # <<<<<<<<<<<<<<
 *     cdef unpack_ternary_args[c_connection_cost[float]] \
 *         *unpacked_connection_cost = \
 */
  __pyx_v_connection_cost_f = new connection_cost<float> (__pyx_v_critical_path, __pyx_v_criticality_exp);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":603
 *         *unpacked_connection_cost = \
 *         new unpack_ternary_args[c_connection_cost[float]] \
 *         (deref(connection_cost_f))             # <<<<<<<<<<<<<<
 * 
 *     # Equivalent to:
 */
  __pyx_v_unpacked_connection_cost = new unpack_ternary_args<connection_cost<float> > ((*__pyx_v_connection_cost_f));

  /* "thrust_timing/cuda/SORT_TIMING.pyx":611
 *     #                                 self._departure_times[a['target_key'].values])
 *     #                                 / self.critical_path)
 *     copy_n(             # <<<<<<<<<<<<<<
 *         make_transform_iterator(
 *             make_zip_iterator(
 */
  thrust::copy_n<thrust::transform_iterator<unpack_ternary_args<connection_cost<float> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::device_vector<float> ::iterator,thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> > > > ,size_t,thrust::device_vector<float> ::iterator>(thrust::make_transform_iterator<unpack_ternary_args<connection_cost<float> > ,thrust::zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::device_vector<float> ::iterator,thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> > > >(thrust::make_zip_iterator<thrust::tuple<thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::device_vector<float> ::iterator,thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> > >(thrust::make_tuple<thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> ,thrust::device_vector<float> ::iterator,thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> >(thrust::make_permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_arrival_times->_begin, __pyx_v_driver_key->_begin), __pyx_v_delay->_begin, thrust::make_permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_departure_times->_begin, __pyx_v_sink_key->_begin))), (*__pyx_v_unpacked_connection_cost)), __pyx_v_delay->_vector->size(), __pyx_v_cost->_begin);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":623
 *         cost._begin)
 * 
 *     return critical_path             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_critical_path); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":566
 * 
 * 
 * def connection_cost(float criticality_exp,             # <<<<<<<<<<<<<<
 *                     DeviceVectorViewFloat32 delay,
 *                     DeviceVectorViewFloat32 arrival_times,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.connection_cost", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrust_timing/cuda/SORT_TIMING.pyx":626
 * 
 * 
 * def block_delta_timing_cost(DeviceVectorViewInt32 arrival_target_key,             # <<<<<<<<<<<<<<
 *                             DeviceVectorViewFloat32 arrival_cost,
 *                             DeviceVectorViewFloat32 arrival_cost_prime,
 */

/* Python wrapper */
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_37block_delta_timing_cost(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_36block_delta_timing_cost[] = "block_delta_timing_cost(DeviceVectorView arrival_target_key, DeviceVectorView arrival_cost, DeviceVectorView arrival_cost_prime, DeviceVectorView departure_target_key, DeviceVectorView departure_cost, DeviceVectorView departure_cost_prime, DeviceVectorView arrival_reduced_keys, DeviceVectorView departure_reduced_keys, DeviceVectorView arrival_reduced_target_cost, DeviceVectorView departure_reduced_target_cost, DeviceVectorView block_arrival_cost, DeviceVectorView block_departure_cost)";
static PyMethodDef __pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_37block_delta_timing_cost = {"block_delta_timing_cost", (PyCFunction)__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_37block_delta_timing_cost, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_36block_delta_timing_cost};
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_37block_delta_timing_cost(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_arrival_target_key = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arrival_cost = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arrival_cost_prime = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_departure_target_key = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_departure_cost = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_departure_cost_prime = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_arrival_reduced_keys = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_departure_reduced_keys = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arrival_reduced_target_cost = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_departure_reduced_target_cost = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_block_arrival_cost = 0;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_block_departure_cost = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("block_delta_timing_cost (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arrival_target_key,&__pyx_n_s_arrival_cost,&__pyx_n_s_arrival_cost_prime,&__pyx_n_s_departure_target_key,&__pyx_n_s_departure_cost,&__pyx_n_s_departure_cost_prime,&__pyx_n_s_arrival_reduced_keys,&__pyx_n_s_departure_reduced_keys,&__pyx_n_s_arrival_reduced_target_cost,&__pyx_n_s_departure_reduced_target_cost,&__pyx_n_s_block_arrival_cost,&__pyx_n_s_block_departure_cost,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arrival_target_key)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arrival_cost)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("block_delta_timing_cost", 1, 12, 12, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arrival_cost_prime)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("block_delta_timing_cost", 1, 12, 12, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_departure_target_key)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("block_delta_timing_cost", 1, 12, 12, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_departure_cost)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("block_delta_timing_cost", 1, 12, 12, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_departure_cost_prime)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("block_delta_timing_cost", 1, 12, 12, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arrival_reduced_keys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("block_delta_timing_cost", 1, 12, 12, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_departure_reduced_keys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("block_delta_timing_cost", 1, 12, 12, 7); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arrival_reduced_target_cost)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("block_delta_timing_cost", 1, 12, 12, 8); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_departure_reduced_target_cost)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("block_delta_timing_cost", 1, 12, 12, 9); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_block_arrival_cost)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("block_delta_timing_cost", 1, 12, 12, 10); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_block_departure_cost)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("block_delta_timing_cost", 1, 12, 12, 11); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "block_delta_timing_cost") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
    }
    __pyx_v_arrival_target_key = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[0]);
    __pyx_v_arrival_cost = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[1]);
    __pyx_v_arrival_cost_prime = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[2]);
    __pyx_v_departure_target_key = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[3]);
    __pyx_v_departure_cost = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[4]);
    __pyx_v_departure_cost_prime = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[5]);
    __pyx_v_arrival_reduced_keys = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[6]);
    __pyx_v_departure_reduced_keys = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *)values[7]);
    __pyx_v_arrival_reduced_target_cost = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[8]);
    __pyx_v_departure_reduced_target_cost = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[9]);
    __pyx_v_block_arrival_cost = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[10]);
    __pyx_v_block_departure_cost = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[11]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("block_delta_timing_cost", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.block_delta_timing_cost", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arrival_target_key), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "arrival_target_key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arrival_cost), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "arrival_cost", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arrival_cost_prime), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "arrival_cost_prime", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_departure_target_key), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "departure_target_key", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 629; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_departure_cost), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "departure_cost", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_departure_cost_prime), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "departure_cost_prime", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arrival_reduced_keys), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "arrival_reduced_keys", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_departure_reduced_keys), __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView, 1, "departure_reduced_keys", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arrival_reduced_target_cost), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "arrival_reduced_target_cost", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_departure_reduced_target_cost), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "departure_reduced_target_cost", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_block_arrival_cost), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "block_arrival_cost", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_block_departure_cost), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "block_departure_cost", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_36block_delta_timing_cost(__pyx_self, __pyx_v_arrival_target_key, __pyx_v_arrival_cost, __pyx_v_arrival_cost_prime, __pyx_v_departure_target_key, __pyx_v_departure_cost, __pyx_v_departure_cost_prime, __pyx_v_arrival_reduced_keys, __pyx_v_departure_reduced_keys, __pyx_v_arrival_reduced_target_cost, __pyx_v_departure_reduced_target_cost, __pyx_v_block_arrival_cost, __pyx_v_block_departure_cost);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_36block_delta_timing_cost(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_arrival_target_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arrival_cost, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arrival_cost_prime, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_departure_target_key, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_departure_cost, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_departure_cost_prime, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_arrival_reduced_keys, struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView *__pyx_v_departure_reduced_keys, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_arrival_reduced_target_cost, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_departure_reduced_target_cost, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_block_arrival_cost, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_block_departure_cost) {
  thrust::minus<float>  __pyx_v_minus_f;
  thrust::plus<float>  __pyx_v_plus_f;
  size_t __pyx_v_arrival_block_count;
  size_t __pyx_v_departure_block_count;
  float __pyx_v_max_delta_cost;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("block_delta_timing_cost", 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":646
 * 
 *     # Compute the difference in cost of incoming edges to blocks.
 *     transform2(arrival_cost_prime._begin, arrival_cost_prime._end,             # <<<<<<<<<<<<<<
 *                arrival_cost._begin, arrival_cost_prime._begin, minus_f)
 * 
 */
  thrust::transform<thrust::device_vector<float> ::iterator,thrust::device_vector<float> ::iterator,thrust::device_vector<float> ::iterator,thrust::minus<float> >(__pyx_v_arrival_cost_prime->_begin, __pyx_v_arrival_cost_prime->_end, __pyx_v_arrival_cost->_begin, __pyx_v_arrival_cost_prime->_begin, __pyx_v_minus_f);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":655
 *                           arrival_cost_prime._begin,
 *                           arrival_reduced_keys._begin,
 *                           arrival_reduced_target_cost._begin).first -             # <<<<<<<<<<<<<<
 *         arrival_reduced_keys._begin)
 * 
 */
  __pyx_v_arrival_block_count = (((thrust::device_vector<int32_t> ::iterator)thrust::reduce_by_key<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator,thrust::device_vector<float> ::iterator>(__pyx_v_arrival_target_key->_begin, __pyx_v_arrival_target_key->_end, __pyx_v_arrival_cost_prime->_begin, __pyx_v_arrival_reduced_keys->_begin, __pyx_v_arrival_reduced_target_cost->_begin).first) - __pyx_v_arrival_reduced_keys->_begin);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":659
 * 
 *     # Compute the difference in cost of outgoing edges to blocks.
 *     transform2(departure_cost_prime._begin, departure_cost_prime._end,             # <<<<<<<<<<<<<<
 *                departure_cost._begin, departure_cost_prime._begin, minus_f)
 * 
 */
  thrust::transform<thrust::device_vector<float> ::iterator,thrust::device_vector<float> ::iterator,thrust::device_vector<float> ::iterator,thrust::minus<float> >(__pyx_v_departure_cost_prime->_begin, __pyx_v_departure_cost_prime->_end, __pyx_v_departure_cost->_begin, __pyx_v_departure_cost_prime->_begin, __pyx_v_minus_f);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":669
 *                           departure_cost_prime._begin,
 *                           departure_reduced_keys._begin,
 *                           departure_reduced_target_cost._begin).first -             # <<<<<<<<<<<<<<
 *         departure_reduced_keys._begin)
 * 
 */
  __pyx_v_departure_block_count = (((thrust::device_vector<int32_t> ::iterator)thrust::reduce_by_key<thrust::device_vector<int32_t> ::iterator,thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator,thrust::device_vector<float> ::iterator>(__pyx_v_departure_target_key->_begin, __pyx_v_departure_target_key->_end, __pyx_v_departure_cost_prime->_begin, __pyx_v_departure_reduced_keys->_begin, __pyx_v_departure_reduced_target_cost->_begin).first) - __pyx_v_departure_reduced_keys->_begin);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":674
 *     # Scatter the reduced difference of incoming edges for sink blocks to the
 *     # corresponding position in the global block array.
 *     copy_n(             # <<<<<<<<<<<<<<
 *         arrival_reduced_target_cost._begin, arrival_block_count,
 *         make_permutation_iterator(block_arrival_cost._begin,
 */
  thrust::copy_n<thrust::device_vector<float> ::iterator,size_t,thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> >(__pyx_v_arrival_reduced_target_cost->_begin, __pyx_v_arrival_block_count, thrust::make_permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_block_arrival_cost->_begin, __pyx_v_arrival_reduced_keys->_begin));

  /* "thrust_timing/cuda/SORT_TIMING.pyx":680
 *     # Scatter the reduced difference of outgoing edges for sink blocks to the
 *     # corresponding position in the global block array.
 *     copy_n(             # <<<<<<<<<<<<<<
 *         departure_reduced_target_cost._begin, departure_block_count,
 *         make_permutation_iterator(block_departure_cost._begin,
 */
  thrust::copy_n<thrust::device_vector<float> ::iterator,size_t,thrust::permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator> >(__pyx_v_departure_reduced_target_cost->_begin, __pyx_v_departure_block_count, thrust::make_permutation_iterator<thrust::device_vector<float> ::iterator,thrust::device_vector<int32_t> ::iterator>(__pyx_v_block_departure_cost->_begin, __pyx_v_departure_reduced_keys->_begin));

  /* "thrust_timing/cuda/SORT_TIMING.pyx":687
 *     # For each block, add together the differences in incoming and outgoing
 *     # connection costs.
 *     transform2(block_arrival_cost._begin, block_arrival_cost._end,             # <<<<<<<<<<<<<<
 *                block_departure_cost._begin, block_arrival_cost._begin, plus_f)
 * 
 */
  thrust::transform<thrust::device_vector<float> ::iterator,thrust::device_vector<float> ::iterator,thrust::device_vector<float> ::iterator,thrust::plus<float> >(__pyx_v_block_arrival_cost->_begin, __pyx_v_block_arrival_cost->_end, __pyx_v_block_departure_cost->_begin, __pyx_v_block_arrival_cost->_begin, __pyx_v_plus_f);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":692
 *     # For each block, add together the differences in incoming and outgoing
 *     # connection costs.
 *     transform2(block_arrival_cost._begin, block_arrival_cost._end,             # <<<<<<<<<<<<<<
 *                block_departure_cost._begin, block_arrival_cost._begin, plus_f)
 * 
 */
  thrust::transform<thrust::device_vector<float> ::iterator,thrust::device_vector<float> ::iterator,thrust::device_vector<float> ::iterator,thrust::plus<float> >(__pyx_v_block_arrival_cost->_begin, __pyx_v_block_arrival_cost->_end, __pyx_v_block_departure_cost->_begin, __pyx_v_block_arrival_cost->_begin, __pyx_v_plus_f);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":695
 *                block_departure_cost._begin, block_arrival_cost._begin, plus_f)
 * 
 *     cdef float max_delta_cost = deref(max_element(block_arrival_cost._begin,             # <<<<<<<<<<<<<<
 *                                                   block_arrival_cost._end))
 * 
 */
  __pyx_v_max_delta_cost = (*thrust::max_element<thrust::device_vector<float> ::iterator>(__pyx_v_block_arrival_cost->_begin, __pyx_v_block_arrival_cost->_end));

  /* "thrust_timing/cuda/SORT_TIMING.pyx":698
 *                                                   block_arrival_cost._end))
 * 
 *     return arrival_block_count, departure_block_count, max_delta_cost             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_arrival_block_count); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_departure_block_count); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_max_delta_cost); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":626
 * 
 * 
 * def block_delta_timing_cost(DeviceVectorViewInt32 arrival_target_key,             # <<<<<<<<<<<<<<
 *                             DeviceVectorViewFloat32 arrival_cost,
 *                             DeviceVectorViewFloat32 arrival_cost_prime,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.block_delta_timing_cost", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrust_timing/cuda/SORT_TIMING.pyx":701
 * 
 * 
 * def compute_normalized_weighted_sum(float alpha, DeviceVectorViewFloat32 a,             # <<<<<<<<<<<<<<
 *                                     float a_max, DeviceVectorViewFloat32 b,
 *                                     float b_max,
 */

/* Python wrapper */
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_39compute_normalized_weighted_sum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_38compute_normalized_weighted_sum[] = "compute_normalized_weighted_sum(float alpha, DeviceVectorView a, float a_max, DeviceVectorView b, float b_max, DeviceVectorView output)";
static PyMethodDef __pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_39compute_normalized_weighted_sum = {"compute_normalized_weighted_sum", (PyCFunction)__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_39compute_normalized_weighted_sum, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_38compute_normalized_weighted_sum};
static PyObject *__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_39compute_normalized_weighted_sum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_alpha;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_a = 0;
  float __pyx_v_a_max;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_b = 0;
  float __pyx_v_b_max;
  struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_output = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_normalized_weighted_sum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_alpha,&__pyx_n_s_a,&__pyx_n_s_a_max,&__pyx_n_s_b,&__pyx_n_s_b_max,&__pyx_n_s_output,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_normalized_weighted_sum", 1, 6, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a_max)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_normalized_weighted_sum", 1, 6, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_normalized_weighted_sum", 1, 6, 6, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b_max)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_normalized_weighted_sum", 1, 6, 6, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_output)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_normalized_weighted_sum", 1, 6, 6, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_normalized_weighted_sum") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_alpha = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_alpha == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_a = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[1]);
    __pyx_v_a_max = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_a_max == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[3]);
    __pyx_v_b_max = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_b_max == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_output = ((struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *)values[5]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_normalized_weighted_sum", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("thrust_timing.cuda.SORT_TIMING.compute_normalized_weighted_sum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "a", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "b", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output), __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView, 1, "output", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 704; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_38compute_normalized_weighted_sum(__pyx_self, __pyx_v_alpha, __pyx_v_a, __pyx_v_a_max, __pyx_v_b, __pyx_v_b_max, __pyx_v_output);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13thrust_timing_4cuda_11SORT_TIMING_38compute_normalized_weighted_sum(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_alpha, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_a, float __pyx_v_a_max, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_b, float __pyx_v_b_max, struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView *__pyx_v_output) {
  normalized_weighted_sum<float>  *__pyx_v_w_sum;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_normalized_weighted_sum", 0);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":711
 *     #                         max_timing_delta))
 *     cdef normalized_weighted_sum[float] *w_sum =\
 *         new normalized_weighted_sum[float](alpha, a_max, b_max)             # <<<<<<<<<<<<<<
 * 
 *     transform2(a._begin, a._end, b._begin, output._begin, deref(w_sum))
 */
  __pyx_v_w_sum = new normalized_weighted_sum<float> (__pyx_v_alpha, __pyx_v_a_max, __pyx_v_b_max);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":713
 *         new normalized_weighted_sum[float](alpha, a_max, b_max)
 * 
 *     transform2(a._begin, a._end, b._begin, output._begin, deref(w_sum))             # <<<<<<<<<<<<<<
 */
  thrust::transform<thrust::device_vector<float> ::iterator,thrust::device_vector<float> ::iterator,thrust::device_vector<float> ::iterator,normalized_weighted_sum<float> >(__pyx_v_a->_begin, __pyx_v_a->_end, __pyx_v_b->_begin, __pyx_v_output->_begin, (*__pyx_v_w_sum));

  /* "thrust_timing/cuda/SORT_TIMING.pyx":701
 * 
 * 
 * def compute_normalized_weighted_sum(float alpha, DeviceVectorViewFloat32 a,             # <<<<<<<<<<<<<<
 *                                     float a_max, DeviceVectorViewFloat32 b,
 *                                     float b_max,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":200
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":203
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":204
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":206
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":208
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":209
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":213
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":214
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":217
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":221
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":223
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":228
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }
    goto __pyx_L11;
  }
  /*else*/ {

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":232
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":234
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":236
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":239
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */
  __pyx_v_f = NULL;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":240
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":244
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;
    goto __pyx_L14;
  }
  /*else*/ {

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":251
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":253
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":254
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":256
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;
    if (__pyx_t_1) {

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
    switch (__pyx_v_t) {

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
      case NPY_BYTE:
      __pyx_v_f = __pyx_k_b;
      break;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = __pyx_k_B;
      break;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = __pyx_k_h;
      break;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = __pyx_k_H;
      break;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = __pyx_k_i;
      break;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = __pyx_k_I;
      break;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = __pyx_k_l;
      break;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = __pyx_k_L;
      break;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = __pyx_k_q;
      break;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = __pyx_k_Q;
      break;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = __pyx_k_f;
      break;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = __pyx_k_d;
      break;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = __pyx_k_g;
      break;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = __pyx_k_Zf;
      break;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = __pyx_k_Zd;
      break;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = __pyx_k_Zg;
      break;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = __pyx_k_O;
      break;
      default:

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      break;
    }

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":277
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
    __pyx_v_info->format = ((char *)malloc(255));

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":281
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_7;

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":289
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":769
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":772
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":790
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_6) {

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 120;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 104;
        goto __pyx_L15;
      }

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 105;
        goto __pyx_L15;
      }

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 108;
        goto __pyx_L15;
      }

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 113;
        goto __pyx_L15;
      }

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 102;
        goto __pyx_L15;
      }

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 100;
        goto __pyx_L15;
      }

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 103;
        goto __pyx_L15;
      }

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 102;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 100;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 103;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }
      /*else*/ {

        /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L15:;

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);
      goto __pyx_L13;
    }
    /*else*/ {

      /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
    Py_INCREF(__pyx_v_base);

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {"fill_longest_paths", (PyCFunction)__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_27fill_longest_paths, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_26fill_longest_paths},
  {"look_up_delay", (PyCFunction)__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_29look_up_delay, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_28look_up_delay},
  {"look_up_delay_prime", (PyCFunction)__pyx_pw_13thrust_timing_4cuda_11SORT_TIMING_31look_up_delay_prime, METH_VARARGS|METH_KEYWORDS, __pyx_doc_13thrust_timing_4cuda_11SORT_TIMING_30look_up_delay_prime},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "SORT_TIMING",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_a_max, __pyx_k_a_max, sizeof(__pyx_k_a_max), 0, 0, 1, 1},
  {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_arch_delays, __pyx_k_arch_delays, sizeof(__pyx_k_arch_delays), 0, 0, 1, 1},
  {&__pyx_n_s_arrival_block_count, __pyx_k_arrival_block_count, sizeof(__pyx_k_arrival_block_count), 0, 0, 1, 1},
  {&__pyx_n_s_arrival_cost, __pyx_k_arrival_cost, sizeof(__pyx_k_arrival_cost), 0, 0, 1, 1},
  {&__pyx_n_s_arrival_cost_prime, __pyx_k_arrival_cost_prime, sizeof(__pyx_k_arrival_cost_prime), 0, 0, 1, 1},
  {&__pyx_n_s_arrival_reduced_keys, __pyx_k_arrival_reduced_keys, sizeof(__pyx_k_arrival_reduced_keys), 0, 0, 1, 1},
  {&__pyx_n_s_arrival_reduced_target_cost, __pyx_k_arrival_reduced_target_cost, sizeof(__pyx_k_arrival_reduced_target_cost), 0, 0, 1, 1},
  {&__pyx_n_s_arrival_target_key, __pyx_k_arrival_target_key, sizeof(__pyx_k_arrival_target_key), 0, 0, 1, 1},
  {&__pyx_n_s_arrival_times, __pyx_k_arrival_times, sizeof(__pyx_k_arrival_times), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_b_max, __pyx_k_b_max, sizeof(__pyx_k_b_max), 0, 0, 1, 1},
  {&__pyx_n_s_block_arrival_cost, __pyx_k_block_arrival_cost, sizeof(__pyx_k_block_arrival_cost), 0, 0, 1, 1},
  {&__pyx_n_s_block_delta_timing_cost, __pyx_k_block_delta_timing_cost, sizeof(__pyx_k_block_delta_timing_cost), 0, 0, 1, 1},
  {&__pyx_n_s_block_departure_cost, __pyx_k_block_departure_cost, sizeof(__pyx_k_block_departure_cost), 0, 0, 1, 1},
  {&__pyx_n_s_block_min_source_longest_path, __pyx_k_block_min_source_longest_path, sizeof(__pyx_k_block_min_source_longest_path), 0, 0, 1, 1},
  {&__pyx_n_s_compute_normalized_weighted_sum, __pyx_k_compute_normalized_weighted_sum, sizeof(__pyx_k_compute_normalized_weighted_sum), 0, 0, 1, 1},
  {&__pyx_n_s_connection_cost, __pyx_k_connection_cost, sizeof(__pyx_k_connection_cost), 0, 0, 1, 1},
  {&__pyx_n_s_connection_cost_f, __pyx_k_connection_cost_f, sizeof(__pyx_k_connection_cost_f), 0, 0, 1, 1},
  {&__pyx_n_s_connection_criticality, __pyx_k_connection_criticality, sizeof(__pyx_k_connection_criticality), 0, 0, 1, 1},
  {&__pyx_n_s_connection_criticality_f, __pyx_k_connection_criticality_f, sizeof(__pyx_k_connection_criticality_f), 0, 0, 1, 1},
  {&__pyx_n_s_cost, __pyx_k_cost, sizeof(__pyx_k_cost), 0, 0, 1, 1},
  {&__pyx_n_s_critical_path, __pyx_k_critical_path, sizeof(__pyx_k_critical_path), 0, 0, 1, 1},
  {&__pyx_n_s_criticality, __pyx_k_criticality, sizeof(__pyx_k_criticality), 0, 0, 1, 1},
  {&__pyx_n_s_criticality_exp, __pyx_k_criticality_exp, sizeof(__pyx_k_criticality_exp), 0, 0, 1, 1},
  {&__pyx_n_s_delay, __pyx_k_delay, sizeof(__pyx_k_delay), 0, 0, 1, 1},
  {&__pyx_n_s_delay_type, __pyx_k_delay_type, sizeof(__pyx_k_delay_type), 0, 0, 1, 1},
  {&__pyx_n_s_departure_block_count, __pyx_k_departure_block_count, sizeof(__pyx_k_departure_block_count), 0, 0, 1, 1},
  {&__pyx_n_s_departure_cost, __pyx_k_departure_cost, sizeof(__pyx_k_departure_cost), 0, 0, 1, 1},
  {&__pyx_n_s_departure_cost_prime, __pyx_k_departure_cost_prime, sizeof(__pyx_k_departure_cost_prime), 0, 0, 1, 1},
  {&__pyx_n_s_departure_reduced_keys, __pyx_k_departure_reduced_keys, sizeof(__pyx_k_departure_reduced_keys), 0, 0, 1, 1},
  {&__pyx_n_s_departure_reduced_target_cost, __pyx_k_departure_reduced_target_cost, sizeof(__pyx_k_departure_reduced_target_cost), 0, 0, 1, 1},
  {&__pyx_n_s_departure_target_key, __pyx_k_departure_target_key, sizeof(__pyx_k_departure_target_key), 0, 0, 1, 1},
  {&__pyx_n_s_departure_times, __pyx_k_departure_times, sizeof(__pyx_k_departure_times), 0, 0, 1, 1},
  {&__pyx_n_s_driver_key, __pyx_k_driver_key, sizeof(__pyx_k_driver_key), 0, 0, 1, 1},
  {&__pyx_n_s_equal_to, __pyx_k_equal_to, sizeof(__pyx_k_equal_to), 0, 0, 1, 1},
  {&__pyx_n_s_external_block_keys, __pyx_k_external_block_keys, sizeof(__pyx_k_external_block_keys), 0, 0, 1, 1},
  {&__pyx_kp_s_home_christian_virtualenvs_vpr, __pyx_k_home_christian_virtualenvs_vpr, sizeof(__pyx_k_home_christian_virtualenvs_vpr), 0, 0, 1, 0},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_longest_paths, __pyx_k_longest_paths, sizeof(__pyx_k_longest_paths), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_delta_cost, __pyx_k_max_delta_cost, sizeof(__pyx_k_max_delta_cost), 0, 0, 1, 1},
  {&__pyx_n_s_max_target_longest_path, __pyx_k_max_target_longest_path, sizeof(__pyx_k_max_target_longest_path), 0, 0, 1, 1},
  {&__pyx_n_s_maximum_f, __pyx_k_maximum_f, sizeof(__pyx_k_maximum_f), 0, 0, 1, 1},
  {&__pyx_n_s_min_source_longest_path, __pyx_k_min_source_longest_path, sizeof(__pyx_k_min_source_longest_path), 0, 0, 1, 1},
  {&__pyx_n_s_minimum_f, __pyx_k_minimum_f, sizeof(__pyx_k_minimum_f), 0, 0, 1, 1},
  {&__pyx_n_s_minus_f, __pyx_k_minus_f, sizeof(__pyx_k_minus_f), 0, 0, 1, 1},
  {&__pyx_n_s_ncols, __pyx_k_ncols, sizeof(__pyx_k_ncols), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_non_negative_f, __pyx_k_non_negative_f, sizeof(__pyx_k_non_negative_f), 0, 0, 1, 1},
  {&__pyx_n_s_nrows, __pyx_k_nrows, sizeof(__pyx_k_nrows), 0, 0, 1, 1},
  {&__pyx_n_s_output, __pyx_k_output, sizeof(__pyx_k_output), 0, 0, 1, 1},
  {&__pyx_n_s_p_x, __pyx_k_p_x, sizeof(__pyx_k_p_x), 0, 0, 1, 1},
  {&__pyx_n_s_p_x_prime, __pyx_k_p_x_prime, sizeof(__pyx_k_p_x_prime), 0, 0, 1, 1},
  {&__pyx_n_s_p_y, __pyx_k_p_y, sizeof(__pyx_k_p_y), 0, 0, 1, 1},
  {&__pyx_n_s_p_y_prime, __pyx_k_p_y_prime, sizeof(__pyx_k_p_y_prime), 0, 0, 1, 1},
  {&__pyx_n_s_plus_f, __pyx_k_plus_f, sizeof(__pyx_k_plus_f), 0, 0, 1, 1},
  {&__pyx_n_s_positive_f, __pyx_k_positive_f, sizeof(__pyx_k_positive_f), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_ready_connection_count, __pyx_k_ready_connection_count, sizeof(__pyx_k_ready_connection_count), 0, 0, 1, 1},
  {&__pyx_n_s_reduced_keys, __pyx_k_reduced_keys, sizeof(__pyx_k_reduced_keys), 0, 0, 1, 1},
  {&__pyx_n_s_reset_block_min_source_longest_p, __pyx_k_reset_block_min_source_longest_p, sizeof(__pyx_k_reset_block_min_source_longest_p), 0, 0, 1, 1},
  {&__pyx_n_s_resolved_block_count, __pyx_k_resolved_block_count, sizeof(__pyx_k_resolved_block_count), 0, 0, 1, 1},
  {&__pyx_n_s_scatter_longest_paths, __pyx_k_scatter_longest_paths, sizeof(__pyx_k_scatter_longest_paths), 0, 0, 1, 1},
  {&__pyx_n_s_single_connection_blocks, __pyx_k_single_connection_blocks, sizeof(__pyx_k_single_connection_blocks), 0, 0, 1, 1},
  {&__pyx_n_s_sink_key, __pyx_k_sink_key, sizeof(__pyx_k_sink_key), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_sort_by_target_key, __pyx_k_sort_by_target_key, sizeof(__pyx_k_sort_by_target_key), 0, 0, 1, 1},
  {&__pyx_n_s_source_key, __pyx_k_source_key, sizeof(__pyx_k_source_key), 0, 0, 1, 1},
  {&__pyx_n_s_source_longest_path, __pyx_k_source_longest_path, sizeof(__pyx_k_source_longest_path), 0, 0, 1, 1},
  {&__pyx_n_s_step1, __pyx_k_step1, sizeof(__pyx_k_step1), 0, 0, 1, 1},
  {&__pyx_n_s_step10, __pyx_k_step10, sizeof(__pyx_k_step10), 0, 0, 1, 1},
  {&__pyx_n_s_step2, __pyx_k_step2, sizeof(__pyx_k_step2), 0, 0, 1, 1},
  {&__pyx_n_s_step3, __pyx_k_step3, sizeof(__pyx_k_step3), 0, 0, 1, 1},
  {&__pyx_n_s_step4, __pyx_k_step4, sizeof(__pyx_k_step4), 0, 0, 1, 1},
  {&__pyx_n_s_step5, __pyx_k_step5, sizeof(__pyx_k_step5), 0, 0, 1, 1},
  {&__pyx_n_s_step6, __pyx_k_step6, sizeof(__pyx_k_step6), 0, 0, 1, 1},
  {&__pyx_n_s_step7, __pyx_k_step7, sizeof(__pyx_k_step7), 0, 0, 1, 1},
  {&__pyx_n_s_step8, __pyx_k_step8, sizeof(__pyx_k_step8), 0, 0, 1, 1},
  {&__pyx_n_s_step9, __pyx_k_step9, sizeof(__pyx_k_step9), 0, 0, 1, 1},
  {&__pyx_n_s_sync_logic_block_keys, __pyx_k_sync_logic_block_keys, sizeof(__pyx_k_sync_logic_block_keys), 0, 0, 1, 1},
  {&__pyx_n_s_sync_source, __pyx_k_sync_source, sizeof(__pyx_k_sync_source), 0, 0, 1, 1},
  {&__pyx_n_s_sync_target, __pyx_k_sync_target, sizeof(__pyx_k_sync_target), 0, 0, 1, 1},
  {&__pyx_n_s_target_key, __pyx_k_target_key, sizeof(__pyx_k_target_key), 0, 0, 1, 1},
  {&__pyx_n_s_target_longest_path, __pyx_k_target_longest_path, sizeof(__pyx_k_target_longest_path), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_thrust_timing_cuda_SORT_TIMING, __pyx_k_thrust_timing_cuda_SORT_TIMING, sizeof(__pyx_k_thrust_timing_cuda_SORT_TIMING), 0, 0, 1, 1},
  {&__pyx_n_s_unique_block_count, __pyx_k_unique_block_count, sizeof(__pyx_k_unique_block_count), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_unpacked_connection_cost, __pyx_k_unpacked_connection_cost, sizeof(__pyx_k_unpacked_connection_cost), 0, 0, 1, 1},
  {&__pyx_n_s_unpacked_connection_criticality, __pyx_k_unpacked_connection_criticality, sizeof(__pyx_k_unpacked_connection_criticality), 0, 0, 1, 1},
  {&__pyx_n_s_w_sum, __pyx_k_w_sum, sizeof(__pyx_k_w_sum), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "thrust_timing/cuda/SORT_TIMING.pyx":46
 * 
 * 
 * def sort_by_target_key(DeviceVectorViewInt32 source_key,             # <<<<<<<<<<<<<<
 *                        DeviceVectorViewInt32 target_key,
 *                        DeviceVectorViewUint8 sync_source,
 */
  __pyx_tuple__7 = PyTuple_Pack(5, __pyx_n_s_source_key, __pyx_n_s_target_key, __pyx_n_s_sync_source, __pyx_n_s_sync_target, __pyx_n_s_delay); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_christian_virtualenvs_vpr, __pyx_n_s_sort_by_target_key, 46, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "thrust_timing/cuda/SORT_TIMING.pyx":58
 * 
 * 
 * def reset_block_min_source_longest_path(             # <<<<<<<<<<<<<<
 *     DeviceVectorViewFloat32 block_min_source_longest_path):
 *     # Equivalent to:
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_n_s_block_min_source_longest_path); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_christian_virtualenvs_vpr, __pyx_n_s_reset_block_min_source_longest_p, 58, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "thrust_timing/cuda/SORT_TIMING.pyx":67
 * 
 * 
 * def step1(DeviceVectorViewFloat32 longest_paths,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewInt32 source_key,
 *           DeviceVectorViewFloat32 source_longest_path):
 */
  __pyx_tuple__11 = PyTuple_Pack(3, __pyx_n_s_longest_paths, __pyx_n_s_source_key, __pyx_n_s_source_longest_path); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_christian_virtualenvs_vpr, __pyx_n_s_step1, 67, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "thrust_timing/cuda/SORT_TIMING.pyx":84
 * 
 * 
 * def step2(DeviceVectorViewUint8 sync_source,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewFloat32 source_longest_path):
 *     '''
 */
  __pyx_tuple__13 = PyTuple_Pack(3, __pyx_n_s_sync_source, __pyx_n_s_source_longest_path, __pyx_n_s_positive_f); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_christian_virtualenvs_vpr, __pyx_n_s_step2, 84, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "thrust_timing/cuda/SORT_TIMING.pyx":101
 * 
 * 
 * def step3(DeviceVectorViewInt32 source_key,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewInt32 target_key,
 *           DeviceVectorViewUint8 sync_source,
 */
  __pyx_tuple__15 = PyTuple_Pack(12, __pyx_n_s_source_key, __pyx_n_s_target_key, __pyx_n_s_sync_source, __pyx_n_s_sync_target, __pyx_n_s_delay, __pyx_n_s_target_longest_path, __pyx_n_s_min_source_longest_path, __pyx_n_s_source_longest_path, __pyx_n_s_reduced_keys, __pyx_n_s_equal_to, __pyx_n_s_minimum_f, __pyx_n_s_unique_block_count); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(9, 0, 12, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_christian_virtualenvs_vpr, __pyx_n_s_step3, 101, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "thrust_timing/cuda/SORT_TIMING.pyx":140
 * 
 * 
 * def step4(DeviceVectorViewFloat32 block_min_source_longest_path,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewFloat32 min_source_longest_path,
 *           DeviceVectorViewInt32 reduced_keys, size_t unique_block_count):
 */
  __pyx_tuple__17 = PyTuple_Pack(5, __pyx_n_s_block_min_source_longest_path, __pyx_n_s_min_source_longest_path, __pyx_n_s_reduced_keys, __pyx_n_s_unique_block_count, __pyx_n_s_non_negative_f); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_christian_virtualenvs_vpr, __pyx_n_s_step4, 140, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "thrust_timing/cuda/SORT_TIMING.pyx":163
 * 
 * 
 * def step5(DeviceVectorViewFloat32 block_min_source_longest_path,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewInt32 target_key,
 *           DeviceVectorViewFloat32 min_source_longest_path):
 */
  __pyx_tuple__19 = PyTuple_Pack(3, __pyx_n_s_block_min_source_longest_path, __pyx_n_s_target_key, __pyx_n_s_min_source_longest_path); if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_christian_virtualenvs_vpr, __pyx_n_s_step5, 163, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "thrust_timing/cuda/SORT_TIMING.pyx":187
 * 
 * 
 * def step6(DeviceVectorViewInt32 source_key,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewInt32 target_key,
 *           DeviceVectorViewUint8 sync_source,
 */
  __pyx_tuple__21 = PyTuple_Pack(9, __pyx_n_s_source_key, __pyx_n_s_target_key, __pyx_n_s_sync_source, __pyx_n_s_sync_target, __pyx_n_s_target_longest_path, __pyx_n_s_min_source_longest_path, __pyx_n_s_source_longest_path, __pyx_n_s_non_negative_f, __pyx_n_s_ready_connection_count); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(7, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_christian_virtualenvs_vpr, __pyx_n_s_step6, 187, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "thrust_timing/cuda/SORT_TIMING.pyx":228
 * 
 * 
 * def step7(DeviceVectorViewFloat32 delay, size_t ready_connection_count):             # <<<<<<<<<<<<<<
 *     '''
 *     Load a unit delay for all connections.
 */
  __pyx_tuple__23 = PyTuple_Pack(2, __pyx_n_s_delay, __pyx_n_s_ready_connection_count); if (unlikely(!__pyx_tuple__23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_christian_virtualenvs_vpr, __pyx_n_s_step7, 228, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "thrust_timing/cuda/SORT_TIMING.pyx":239
 * 
 * 
 * def step8(DeviceVectorViewFloat32 delay,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewFloat32 target_longest_path,
 *           DeviceVectorViewFloat32 source_longest_path,
 */
  __pyx_tuple__25 = PyTuple_Pack(5, __pyx_n_s_delay, __pyx_n_s_target_longest_path, __pyx_n_s_source_longest_path, __pyx_n_s_ready_connection_count, __pyx_n_s_plus_f); if (unlikely(!__pyx_tuple__25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_christian_virtualenvs_vpr, __pyx_n_s_step8, 239, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "thrust_timing/cuda/SORT_TIMING.pyx":260
 * 
 * 
 * def step9(DeviceVectorViewInt32 target_key,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewFloat32 target_longest_path,
 *           DeviceVectorViewFloat32 max_target_longest_path,
 */
  __pyx_tuple__27 = PyTuple_Pack(8, __pyx_n_s_target_key, __pyx_n_s_target_longest_path, __pyx_n_s_max_target_longest_path, __pyx_n_s_reduced_keys, __pyx_n_s_ready_connection_count, __pyx_n_s_maximum_f, __pyx_n_s_equal_to, __pyx_n_s_resolved_block_count); if (unlikely(!__pyx_tuple__27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(5, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_christian_virtualenvs_vpr, __pyx_n_s_step9, 260, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "thrust_timing/cuda/SORT_TIMING.pyx":300
 * 
 * 
 * def step10(DeviceVectorViewFloat32 longest_paths,             # <<<<<<<<<<<<<<
 *            DeviceVectorViewFloat32 max_target_longest_path,
 *            DeviceVectorViewInt32 reduced_keys, size_t resolved_block_count):
 */
  __pyx_tuple__29 = PyTuple_Pack(4, __pyx_n_s_longest_paths, __pyx_n_s_max_target_longest_path, __pyx_n_s_reduced_keys, __pyx_n_s_resolved_block_count); if (unlikely(!__pyx_tuple__29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_christian_virtualenvs_vpr, __pyx_n_s_step10, 300, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "thrust_timing/cuda/SORT_TIMING.pyx":316
 * 
 * 
 * def scatter_longest_paths(DeviceVectorFloat32 longest_paths,             # <<<<<<<<<<<<<<
 *                           DeviceVectorViewFloat32 max_target_longest_path,
 *                           DeviceVectorViewInt32 reduced_keys,
 */
  __pyx_tuple__31 = PyTuple_Pack(4, __pyx_n_s_longest_paths, __pyx_n_s_max_target_longest_path, __pyx_n_s_reduced_keys, __pyx_n_s_resolved_block_count); if (unlikely(!__pyx_tuple__31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_christian_virtualenvs_vpr, __pyx_n_s_scatter_longest_paths, 316, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "thrust_timing/cuda/SORT_TIMING.pyx":510
 * 
 * 
 * def connection_criticality(DeviceVectorViewFloat32 delay,             # <<<<<<<<<<<<<<
 *                            DeviceVectorViewFloat32 arrival_times,
 *                            DeviceVectorViewFloat32 departure_times,
 */
  __pyx_tuple__33 = PyTuple_Pack(10, __pyx_n_s_delay, __pyx_n_s_arrival_times, __pyx_n_s_departure_times, __pyx_n_s_driver_key, __pyx_n_s_sink_key, __pyx_n_s_criticality, __pyx_n_s_maximum_f, __pyx_n_s_critical_path, __pyx_n_s_connection_criticality_f, __pyx_n_s_unpacked_connection_criticality); if (unlikely(!__pyx_tuple__33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(6, 0, 10, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_christian_virtualenvs_vpr, __pyx_n_s_connection_criticality, 510, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "thrust_timing/cuda/SORT_TIMING.pyx":566
 * 
 * 
 * def connection_cost(float criticality_exp,             # <<<<<<<<<<<<<<
 *                     DeviceVectorViewFloat32 delay,
 *                     DeviceVectorViewFloat32 arrival_times,
 */
  __pyx_tuple__35 = PyTuple_Pack(11, __pyx_n_s_criticality_exp, __pyx_n_s_delay, __pyx_n_s_arrival_times, __pyx_n_s_departure_times, __pyx_n_s_driver_key, __pyx_n_s_sink_key, __pyx_n_s_cost, __pyx_n_s_critical_path, __pyx_n_s_maximum_f, __pyx_n_s_connection_cost_f, __pyx_n_s_unpacked_connection_cost); if (unlikely(!__pyx_tuple__35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(8, 0, 11, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_christian_virtualenvs_vpr, __pyx_n_s_connection_cost, 566, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "thrust_timing/cuda/SORT_TIMING.pyx":626
 * 
 * 
 * def block_delta_timing_cost(DeviceVectorViewInt32 arrival_target_key,             # <<<<<<<<<<<<<<
 *                             DeviceVectorViewFloat32 arrival_cost,
 *                             DeviceVectorViewFloat32 arrival_cost_prime,
 */
  __pyx_tuple__37 = PyTuple_Pack(17, __pyx_n_s_arrival_target_key, __pyx_n_s_arrival_cost, __pyx_n_s_arrival_cost_prime, __pyx_n_s_departure_target_key, __pyx_n_s_departure_cost, __pyx_n_s_departure_cost_prime, __pyx_n_s_arrival_reduced_keys, __pyx_n_s_departure_reduced_keys, __pyx_n_s_arrival_reduced_target_cost, __pyx_n_s_departure_reduced_target_cost, __pyx_n_s_block_arrival_cost, __pyx_n_s_block_departure_cost, __pyx_n_s_minus_f, __pyx_n_s_plus_f, __pyx_n_s_arrival_block_count, __pyx_n_s_departure_block_count, __pyx_n_s_max_delta_cost); if (unlikely(!__pyx_tuple__37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(12, 0, 17, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_christian_virtualenvs_vpr, __pyx_n_s_block_delta_timing_cost, 626, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "thrust_timing/cuda/SORT_TIMING.pyx":701
 * 
 * 
 * def compute_normalized_weighted_sum(float alpha, DeviceVectorViewFloat32 a,             # <<<<<<<<<<<<<<
 *                                     float a_max, DeviceVectorViewFloat32 b,
 *                                     float b_max,
 */
  __pyx_tuple__39 = PyTuple_Pack(7, __pyx_n_s_alpha, __pyx_n_s_a, __pyx_n_s_a_max, __pyx_n_s_b, __pyx_n_s_b_max, __pyx_n_s_output, __pyx_n_s_w_sum); if (unlikely(!__pyx_tuple__39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(6, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_christian_virtualenvs_vpr, __pyx_n_s_compute_normalized_weighted_sum, 701, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initSORT_TIMING(void); /*proto*/
PyMODINIT_FUNC initSORT_TIMING(void)
#else
PyMODINIT_FUNC PyInit_SORT_TIMING(void); /*proto*/
PyMODINIT_FUNC PyInit_SORT_TIMING(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_SORT_TIMING(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("SORT_TIMING", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_thrust_timing__cuda__SORT_TIMING) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "thrust_timing.cuda.SORT_TIMING")) {
      if (unlikely(PyDict_SetItemString(modules, "thrust_timing.cuda.SORT_TIMING", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cythrust_4cuda_13device_vector_4int8_13device_vector_DeviceVector = __Pyx_ImportType("cythrust.cuda.device_vector.int8.device_vector", "DeviceVector", sizeof(struct __pyx_obj_8cythrust_4cuda_13device_vector_4int8_13device_vector_DeviceVector), 1); if (unlikely(!__pyx_ptype_8cythrust_4cuda_13device_vector_4int8_13device_vector_DeviceVector)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cythrust_4cuda_13device_vector_4int8_13device_vector_DeviceVectorView = __Pyx_ImportType("cythrust.cuda.device_vector.int8.device_vector", "DeviceVectorView", sizeof(struct __pyx_obj_8cythrust_4cuda_13device_vector_4int8_13device_vector_DeviceVectorView), 1); if (unlikely(!__pyx_ptype_8cythrust_4cuda_13device_vector_4int8_13device_vector_DeviceVectorView)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVector = __Pyx_ImportType("cythrust.cuda.device_vector.uint8.device_vector", "DeviceVector", sizeof(struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVector), 1); if (unlikely(!__pyx_ptype_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVector)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView = __Pyx_ImportType("cythrust.cuda.device_vector.uint8.device_vector", "DeviceVectorView", sizeof(struct __pyx_obj_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView), 1); if (unlikely(!__pyx_ptype_8cythrust_4cuda_13device_vector_5uint8_13device_vector_DeviceVectorView)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cythrust_4cuda_13device_vector_5int16_13device_vector_DeviceVector = __Pyx_ImportType("cythrust.cuda.device_vector.int16.device_vector", "DeviceVector", sizeof(struct __pyx_obj_8cythrust_4cuda_13device_vector_5int16_13device_vector_DeviceVector), 1); if (unlikely(!__pyx_ptype_8cythrust_4cuda_13device_vector_5int16_13device_vector_DeviceVector)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cythrust_4cuda_13device_vector_5int16_13device_vector_DeviceVectorView = __Pyx_ImportType("cythrust.cuda.device_vector.int16.device_vector", "DeviceVectorView", sizeof(struct __pyx_obj_8cythrust_4cuda_13device_vector_5int16_13device_vector_DeviceVectorView), 1); if (unlikely(!__pyx_ptype_8cythrust_4cuda_13device_vector_5int16_13device_vector_DeviceVectorView)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cythrust_4cuda_13device_vector_6uint16_13device_vector_DeviceVector = __Pyx_ImportType("cythrust.cuda.device_vector.uint16.device_vector", "DeviceVector", sizeof(struct __pyx_obj_8cythrust_4cuda_13device_vector_6uint16_13device_vector_DeviceVector), 1); if (unlikely(!__pyx_ptype_8cythrust_4cuda_13device_vector_6uint16_13device_vector_DeviceVector)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cythrust_4cuda_13device_vector_6uint16_13device_vector_DeviceVectorView = __Pyx_ImportType("cythrust.cuda.device_vector.uint16.device_vector", "DeviceVectorView", sizeof(struct __pyx_obj_8cythrust_4cuda_13device_vector_6uint16_13device_vector_DeviceVectorView), 1); if (unlikely(!__pyx_ptype_8cythrust_4cuda_13device_vector_6uint16_13device_vector_DeviceVectorView)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVector = __Pyx_ImportType("cythrust.cuda.device_vector.int32.device_vector", "DeviceVector", sizeof(struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVector), 1); if (unlikely(!__pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVector)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView = __Pyx_ImportType("cythrust.cuda.device_vector.int32.device_vector", "DeviceVectorView", sizeof(struct __pyx_obj_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView), 1); if (unlikely(!__pyx_ptype_8cythrust_4cuda_13device_vector_5int32_13device_vector_DeviceVectorView)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cythrust_4cuda_13device_vector_6uint32_13device_vector_DeviceVector = __Pyx_ImportType("cythrust.cuda.device_vector.uint32.device_vector", "DeviceVector", sizeof(struct __pyx_obj_8cythrust_4cuda_13device_vector_6uint32_13device_vector_DeviceVector), 1); if (unlikely(!__pyx_ptype_8cythrust_4cuda_13device_vector_6uint32_13device_vector_DeviceVector)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cythrust_4cuda_13device_vector_6uint32_13device_vector_DeviceVectorView = __Pyx_ImportType("cythrust.cuda.device_vector.uint32.device_vector", "DeviceVectorView", sizeof(struct __pyx_obj_8cythrust_4cuda_13device_vector_6uint32_13device_vector_DeviceVectorView), 1); if (unlikely(!__pyx_ptype_8cythrust_4cuda_13device_vector_6uint32_13device_vector_DeviceVectorView)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cythrust_4cuda_13device_vector_5int64_13device_vector_DeviceVector = __Pyx_ImportType("cythrust.cuda.device_vector.int64.device_vector", "DeviceVector", sizeof(struct __pyx_obj_8cythrust_4cuda_13device_vector_5int64_13device_vector_DeviceVector), 1); if (unlikely(!__pyx_ptype_8cythrust_4cuda_13device_vector_5int64_13device_vector_DeviceVector)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cythrust_4cuda_13device_vector_5int64_13device_vector_DeviceVectorView = __Pyx_ImportType("cythrust.cuda.device_vector.int64.device_vector", "DeviceVectorView", sizeof(struct __pyx_obj_8cythrust_4cuda_13device_vector_5int64_13device_vector_DeviceVectorView), 1); if (unlikely(!__pyx_ptype_8cythrust_4cuda_13device_vector_5int64_13device_vector_DeviceVectorView)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cythrust_4cuda_13device_vector_6uint64_13device_vector_DeviceVector = __Pyx_ImportType("cythrust.cuda.device_vector.uint64.device_vector", "DeviceVector", sizeof(struct __pyx_obj_8cythrust_4cuda_13device_vector_6uint64_13device_vector_DeviceVector), 1); if (unlikely(!__pyx_ptype_8cythrust_4cuda_13device_vector_6uint64_13device_vector_DeviceVector)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cythrust_4cuda_13device_vector_6uint64_13device_vector_DeviceVectorView = __Pyx_ImportType("cythrust.cuda.device_vector.uint64.device_vector", "DeviceVectorView", sizeof(struct __pyx_obj_8cythrust_4cuda_13device_vector_6uint64_13device_vector_DeviceVectorView), 1); if (unlikely(!__pyx_ptype_8cythrust_4cuda_13device_vector_6uint64_13device_vector_DeviceVectorView)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVector = __Pyx_ImportType("cythrust.cuda.device_vector.float32.device_vector", "DeviceVector", sizeof(struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVector), 1); if (unlikely(!__pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVector)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView = __Pyx_ImportType("cythrust.cuda.device_vector.float32.device_vector", "DeviceVectorView", sizeof(struct __pyx_obj_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView), 1); if (unlikely(!__pyx_ptype_8cythrust_4cuda_13device_vector_7float32_13device_vector_DeviceVectorView)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cythrust_4cuda_13device_vector_7float64_13device_vector_DeviceVector = __Pyx_ImportType("cythrust.cuda.device_vector.float64.device_vector", "DeviceVector", sizeof(struct __pyx_obj_8cythrust_4cuda_13device_vector_7float64_13device_vector_DeviceVector), 1); if (unlikely(!__pyx_ptype_8cythrust_4cuda_13device_vector_7float64_13device_vector_DeviceVector)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8cythrust_4cuda_13device_vector_7float64_13device_vector_DeviceVectorView = __Pyx_ImportType("cythrust.cuda.device_vector.float64.device_vector", "DeviceVectorView", sizeof(struct __pyx_obj_8cythrust_4cuda_13device_vector_7float64_13device_vector_DeviceVectorView), 1); if (unlikely(!__pyx_ptype_8cythrust_4cuda_13device_vector_7float64_13device_vector_DeviceVectorView)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "thrust_timing/cuda/SORT_TIMING.pyx":46
 * 
 * 
 * def sort_by_target_key(DeviceVectorViewInt32 source_key,             # <<<<<<<<<<<<<<
 *                        DeviceVectorViewInt32 target_key,
 *                        DeviceVectorViewUint8 sync_source,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_1sort_by_target_key, NULL, __pyx_n_s_thrust_timing_cuda_SORT_TIMING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sort_by_target_key, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":58
 * 
 * 
 * def reset_block_min_source_longest_path(             # <<<<<<<<<<<<<<
 *     DeviceVectorViewFloat32 block_min_source_longest_path):
 *     # Equivalent to:
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_3reset_block_min_source_longest_path, NULL, __pyx_n_s_thrust_timing_cuda_SORT_TIMING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reset_block_min_source_longest_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":67
 * 
 * 
 * def step1(DeviceVectorViewFloat32 longest_paths,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewInt32 source_key,
 *           DeviceVectorViewFloat32 source_longest_path):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_5step1, NULL, __pyx_n_s_thrust_timing_cuda_SORT_TIMING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_step1, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":84
 * 
 * 
 * def step2(DeviceVectorViewUint8 sync_source,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewFloat32 source_longest_path):
 *     '''
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_7step2, NULL, __pyx_n_s_thrust_timing_cuda_SORT_TIMING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_step2, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":101
 * 
 * 
 * def step3(DeviceVectorViewInt32 source_key,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewInt32 target_key,
 *           DeviceVectorViewUint8 sync_source,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_9step3, NULL, __pyx_n_s_thrust_timing_cuda_SORT_TIMING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_step3, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":140
 * 
 * 
 * def step4(DeviceVectorViewFloat32 block_min_source_longest_path,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewFloat32 min_source_longest_path,
 *           DeviceVectorViewInt32 reduced_keys, size_t unique_block_count):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_11step4, NULL, __pyx_n_s_thrust_timing_cuda_SORT_TIMING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_step4, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":163
 * 
 * 
 * def step5(DeviceVectorViewFloat32 block_min_source_longest_path,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewInt32 target_key,
 *           DeviceVectorViewFloat32 min_source_longest_path):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_13step5, NULL, __pyx_n_s_thrust_timing_cuda_SORT_TIMING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_step5, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":187
 * 
 * 
 * def step6(DeviceVectorViewInt32 source_key,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewInt32 target_key,
 *           DeviceVectorViewUint8 sync_source,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_15step6, NULL, __pyx_n_s_thrust_timing_cuda_SORT_TIMING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_step6, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":228
 * 
 * 
 * def step7(DeviceVectorViewFloat32 delay, size_t ready_connection_count):             # <<<<<<<<<<<<<<
 *     '''
 *     Load a unit delay for all connections.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_17step7, NULL, __pyx_n_s_thrust_timing_cuda_SORT_TIMING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_step7, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":239
 * 
 * 
 * def step8(DeviceVectorViewFloat32 delay,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewFloat32 target_longest_path,
 *           DeviceVectorViewFloat32 source_longest_path,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_19step8, NULL, __pyx_n_s_thrust_timing_cuda_SORT_TIMING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_step8, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":260
 * 
 * 
 * def step9(DeviceVectorViewInt32 target_key,             # <<<<<<<<<<<<<<
 *           DeviceVectorViewFloat32 target_longest_path,
 *           DeviceVectorViewFloat32 max_target_longest_path,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_21step9, NULL, __pyx_n_s_thrust_timing_cuda_SORT_TIMING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_step9, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":300
 * 
 * 
 * def step10(DeviceVectorViewFloat32 longest_paths,             # <<<<<<<<<<<<<<
 *            DeviceVectorViewFloat32 max_target_longest_path,
 *            DeviceVectorViewInt32 reduced_keys, size_t resolved_block_count):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_23step10, NULL, __pyx_n_s_thrust_timing_cuda_SORT_TIMING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_step10, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":316
 * 
 * 
 * def scatter_longest_paths(DeviceVectorFloat32 longest_paths,             # <<<<<<<<<<<<<<
 *                           DeviceVectorViewFloat32 max_target_longest_path,
 *                           DeviceVectorViewInt32 reduced_keys,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_25scatter_longest_paths, NULL, __pyx_n_s_thrust_timing_cuda_SORT_TIMING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_scatter_longest_paths, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":510
 * 
 * 
 * def connection_criticality(DeviceVectorViewFloat32 delay,             # <<<<<<<<<<<<<<
 *                            DeviceVectorViewFloat32 arrival_times,
 *                            DeviceVectorViewFloat32 departure_times,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_33connection_criticality, NULL, __pyx_n_s_thrust_timing_cuda_SORT_TIMING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_connection_criticality, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":566
 * 
 * 
 * def connection_cost(float criticality_exp,             # <<<<<<<<<<<<<<
 *                     DeviceVectorViewFloat32 delay,
 *                     DeviceVectorViewFloat32 arrival_times,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_35connection_cost, NULL, __pyx_n_s_thrust_timing_cuda_SORT_TIMING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_connection_cost, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":626
 * 
 * 
 * def block_delta_timing_cost(DeviceVectorViewInt32 arrival_target_key,             # <<<<<<<<<<<<<<
 *                             DeviceVectorViewFloat32 arrival_cost,
 *                             DeviceVectorViewFloat32 arrival_cost_prime,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_37block_delta_timing_cost, NULL, __pyx_n_s_thrust_timing_cuda_SORT_TIMING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_block_delta_timing_cost, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":701
 * 
 * 
 * def compute_normalized_weighted_sum(float alpha, DeviceVectorViewFloat32 a,             # <<<<<<<<<<<<<<
 *                                     float a_max, DeviceVectorViewFloat32 b,
 *                                     float b_max,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13thrust_timing_4cuda_11SORT_TIMING_39compute_normalized_weighted_sum, NULL, __pyx_n_s_thrust_timing_cuda_SORT_TIMING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compute_normalized_weighted_sum, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "thrust_timing/cuda/SORT_TIMING.pyx":1
 * #distutils: language=c++             # <<<<<<<<<<<<<<
 * #cython: embedsignature=True, boundscheck=False
 * from libc.stdint cimport int32_t, bool, uint8_t
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init thrust_timing.cuda.SORT_TIMING", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init thrust_timing.cuda.SORT_TIMING");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(tmp_type, tmp_value, tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *x) {
    const int32_t neg_one = (int32_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int32_t, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(int32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int32_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int32_t, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int32_t,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int32_t, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int32_t, long, PyLong_AsLong(x))
            } else if (sizeof(int32_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int32_t, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int32_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int32_t) -1;
        }
    } else {
        int32_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int32_t) -1;
        val = __Pyx_PyInt_As_int32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int32_t");
    return (int32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int32_t");
    return (int32_t) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
